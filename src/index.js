const { Telegraf, Scenes: { Stage }, session } = require('telegraf');
const dotenv = require('dotenv');
const authMiddleware = require('./middleware/auth');
const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');
const { sendWeeklyReport, startScheduler } = require('./services/scheduler');

// –ò–º–ø–æ—Ä—Ç —Å—Ü–µ–Ω
const uploadVideoScene = require('./scenes/uploadVideoScene');
const addWheelPrizeScene = require('./scenes/addWheelPrizeScene');
const postVerificationScene = require('./scenes/postVerificationScene');
const addProductScene = require('./scenes/addProductScene');
const editProductScene = require('./scenes/editProductScene');
const addGameScene = require('./scenes/addGameScene');
const editGameScene = require('./scenes/editGameScene');
const addEventScene = require('./scenes/addEventScene');
const editEventScene = require('./scenes/editEventScene');
const broadcastScene = require('./scenes/broadcastScene');
const setRewardScene = require('./scenes/setRewardScene');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
dotenv.config();
const prisma = new PrismaClient();
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
const states = {
  productCreation: {},
  eventCreation: {},
  gameCreation: {},
  broadcastCreation: {},
  wheelPrizeCreation: {},
  postCreation: {},
  videoUpload: {}
};

// –°–æ–∑–¥–∞–µ–º stage –¥–ª—è —Å—Ü–µ–Ω
const stage = new Stage([
  uploadVideoScene, 
  addWheelPrizeScene, 
  postVerificationScene,
  addProductScene,
  editProductScene,
  addGameScene,
  editGameScene,
  addEventScene,
  editEventScene,
  broadcastScene,
  setRewardScene
]);

// –î–æ–±–∞–≤–ª—è–µ–º middleware
bot.use(session());
bot.use(stage.middleware());
bot.use(authMiddleware);

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('start', require('./commands/start'));
bot.command('menu', require('./commands/menu'));
bot.command('balance', require('./commands/balance'));
bot.command('admin', require('./commands/adminPanel'));
bot.command('statistics', require('./commands/viewStatistics'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', require('./commands/handleCallbackQuery'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
bot.on('contact', async (ctx) => {
  try {
    const contact = ctx.message.contact;
    
    if (contact.user_id === ctx.from.id) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await prisma.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) }
      });

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (!user) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId:', ctx.from.id);
        user = await prisma.user.create({
          data: {
            telegramId: BigInt(ctx.from.id),
            role: 'user',
            balance: 0,
            phoneNumber: contact.phone_number
          }
        });
        console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        user = await prisma.user.update({
          where: { telegramId: BigInt(ctx.from.id) },
          data: { phoneNumber: contact.phone_number }
        });
      }

      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', {
        reply_markup: { remove_keyboard: true }
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const event = await prisma.event.findFirst({
        where: {
          participants: {
            some: {
              telegramId: BigInt(ctx.from.id)
            }
          }
        },
        orderBy: {
          createdAt: 'desc'
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
      await ctx.telegram.sendMessage(
        process.env.ADMIN_CHAT_ID,
        `üíé –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
        `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event?.title}\n` +
        `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
        `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
        `ID: ${ctx.from.id}\n` +
        `–¢–µ–ª–µ—Ñ–æ–Ω: ${contact.phone_number}\n` +
        (event?.priceKur > 0 ? `–û–ø–ª–∞—á–µ–Ω–æ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏: ${event.priceKur}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
      );

      await ctx.reply(
        'üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n' +
        '–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data: 'events' }]
            ]
          }
        }
      );
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
bot.on('photo', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    if (states.postCreation[userId]) {
      await require('./commands/earn').handlePostSubmission(ctx);
      delete states.postCreation[userId];
    } else if (states.productCreation[userId]?.awaitingPhoto) {
      await require('./commands/manageProducts').handleProductPhoto(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
bot.on('video', async (ctx) => {
  try {
    const userId = ctx.from.id;
    
    if (states.videoUpload[userId]) {
      await require('./commands/manageWelcomeVideos').handleVideoUpload(ctx);
      delete states.videoUpload[userId];
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const text = ctx.message.text;

    if (states.productCreation[userId]) {
      await require('./commands/manageProducts').handleProductCreation(ctx);
    } else if (states.eventCreation[userId]) {
      await require('./commands/events').handleEventCreation(ctx);
    } else if (states.gameCreation[userId]) {
      await require('./commands/manageGames').handleGameCreation(ctx);
    } else if (states.broadcastCreation[userId]) {
      await require('./commands/broadcast').handleBroadcastCreation(ctx);
    } else if (states.wheelPrizeCreation[userId]) {
      await require('./commands/manageWheel').handlePrizeCreation(ctx);
    } else if (text.startsWith('/help')) {
      await require('./commands/help')(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
cron.schedule('0 7 * * 0', sendWeeklyReport, {
  timezone: 'Europe/Moscow'
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  startScheduler(bot); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
}).catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err);
});

// –í–∫–ª—é—á–∞–µ–º graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
  states
};
