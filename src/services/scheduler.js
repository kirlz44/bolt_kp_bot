const cron = require('node-cron');
const { PrismaClient } = require('@prisma/client');
const { sendMessageToUser } = require('../utils/telegram');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function sendWeeklyReport() {
  try {
    const superAdminId = process.env.SUPER_ADMIN_ID;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ –ø–æ—Å—Ç–∞–º
    const topPosters = await prisma.user.findMany({
      orderBy: {
        postsCount: 'desc'
      },
      take: 5
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    const topReferrers = await prisma.referral.groupBy({
      by: ['referrerId'],
      _count: {
        userId: true
      },
      orderBy: {
        _count: {
          userId: 'desc'
        }
      },
      take: 5
    });

    let message = 'üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n';
    
    message += '*–¢–æ–ø-5 –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –ø–æ—Å—Ç–æ–≤:*\n';
    for (const user of topPosters) {
      message += `- [${user.telegramId}](tg://user?id=${user.telegramId})\n`;
      message += `–ü–æ—Å—Ç–æ–≤: ${user.postsCount}\n`;
      message += `–ü—Ä–µ–º–∏—Ä–æ–≤–∞—Ç—å: /reward_post_${user.id}\n\n`;
    }

    message += '*–¢–æ–ø-5 –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n';
    for (const ref of topReferrers) {
      const user = await prisma.user.findUnique({
        where: { id: ref.referrerId }
      });
      if (user) {
        message += `- [${user.telegramId}](tg://user?id=${user.telegramId})\n`;
        message += `–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${ref._count.userId}\n`;
        message += `–ü—Ä–µ–º–∏—Ä–æ–≤–∞—Ç—å: /reward_ref_${user.id}\n\n`;
      }
    }

    await sendMessageToUser(superAdminId, message, {
      parse_mode: 'Markdown'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 7:00 –ú–°–ö
cron.schedule('0 7 * * 0', sendWeeklyReport, {
  timezone: 'Europe/Moscow'
});

module.exports = {
  sendWeeklyReport
}; 