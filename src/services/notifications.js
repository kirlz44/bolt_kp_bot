const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const cron = require('node-cron');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
async function notifyAllUsersAboutNewGame(ctx, game) {
  try {
    const users = await prisma.user.findMany();
    const message = `üéÆ *–ù–æ–≤–∞—è –∏–≥—Ä–∞!*\n\n` +
      `*${game.title}*\n\n` +
      `üìÖ –î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${game.date.toLocaleTimeString()}\n` +
      `üìç –ú–µ—Å—Ç–æ: ${game.location}\n` +
      `üí∞ –¶–µ–Ω–∞: ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: ${game.seats}`;

    for (const user of users) {
      try {
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
        if (user.telegramId.toString() === ctx.from.id.toString()) continue;
        
        await ctx.telegram.sendMessage(user.telegramId.toString(), message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `view_game_${game.id}` }]
            ]
          }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –∏–≥—Ä–µ
function scheduleGameReminders(ctx, game, participants) {
  const gameDate = new Date(game.date);
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —Å—É—Ç–∫–∏
  const oneDayBefore = new Date(gameDate);
  oneDayBefore.setDate(oneDayBefore.getDate() - 1);
  
  // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å
  const oneHourBefore = new Date(gameDate);
  oneHourBefore.setHours(oneHourBefore.getHours() - 1);

  // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  participants.forEach(participant => {
    // –ó–∞ —Å—É—Ç–∫–∏
    cron.schedule(
      `${oneDayBefore.getMinutes()} ${oneDayBefore.getHours()} ${oneDayBefore.getDate()} ${oneDayBefore.getMonth() + 1} *`,
      async () => {
        try {
          await ctx.telegram.sendMessage(
            participant.telegramId.toString(),
            `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n` +
            `–ó–∞–≤—Ç—Ä–∞ –≤ ${gameDate.toLocaleTimeString()} —Å–æ—Å—Ç–æ–∏—Ç—Å—è –∏–≥—Ä–∞ "${game.title}"\n` +
            `üìç –ú–µ—Å—Ç–æ: ${game.location}`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.telegramId}:`, error);
        }
      }
    );

    // –ó–∞ —á–∞—Å
    cron.schedule(
      `${oneHourBefore.getMinutes()} ${oneHourBefore.getHours()} ${oneHourBefore.getDate()} ${oneHourBefore.getMonth() + 1} *`,
      async () => {
        try {
          await ctx.telegram.sendMessage(
            participant.telegramId.toString(),
            `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n` +
            `–ß–µ—Ä–µ–∑ —á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –∏–≥—Ä–∞ "${game.title}"\n` +
            `üìç –ú–µ—Å—Ç–æ: ${game.location}`,
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${participant.telegramId}:`, error);
        }
      }
    );
  });
}

module.exports = {
  notifyAllUsersAboutNewGame,
  scheduleGameReminders
}; 