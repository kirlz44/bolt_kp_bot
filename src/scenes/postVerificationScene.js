const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const postVerificationScene = new Scenes.BaseScene('post_verification_scene');

const NETWORK_NAMES = {
  vk: '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
  instagram: 'Instagram',
  telegram: 'Telegram',
  ok: '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏'
};

postVerificationScene.enter(async (ctx) => {
  const network = ctx.scene.state.network;
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const reward = await prisma.socialMediaReward.findUnique({
    where: { platform: network }
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
  const rewardAmount = reward?.amount || {
    vk: 300,
    instagram: 300,
    telegram: 200,
    ok: 200
  }[network];

  await ctx.reply(
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ ${NETWORK_NAMES[network]}.\n` +
    `–ó–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ${rewardAmount} –∫—É—Ä–∞–∂–∏–∫–æ–≤.\n\n` +
    '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel'
  );
});

postVerificationScene.command('cancel', async (ctx) => {
  await ctx.reply('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞', callback_data: 'earn' }]
      ]
    }
  });
  await ctx.scene.leave();
});

postVerificationScene.on(['photo', 'document'], async (ctx) => {
  try {
    const network = ctx.scene.state.network;
    const userId = ctx.from.id;
    const username = ctx.from.username ? `@${ctx.from.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
    const fullName = ctx.from.first_name + (ctx.from.last_name ? ` ${ctx.from.last_name}` : '');

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
    const reward = await prisma.socialMediaReward.findUnique({
      where: { platform: network }
    });

    const rewardAmount = reward?.amount || {
      vk: 300,
      instagram: 300,
      telegram: 200,
      ok: 200
    }[network];

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    const adminMessage = 
      `üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n` +
      `–°–æ—Ü—Å–µ—Ç—å: ${NETWORK_NAMES[network]}\n` +
      `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fullName}\n` +
      `Username: ${username}\n` +
      `ID: ${userId}\n` +
      `–ù–∞–≥—Ä–∞–¥–∞: ${rewardAmount} –∫—É—Ä–∞–∂–∏–∫–æ–≤`;

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞–º
    await ctx.telegram.sendPhoto(
      process.env.ADMIN_CHAT_ID,
      ctx.message.photo[0].file_id,
      {
        caption: adminMessage,
        reply_markup: {
          inline_keyboard: [
            [
              { 
                text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 
                callback_data: `approve_post_${userId}_${network}`
              },
              { 
                text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                callback_data: `reject_post_${userId}_${network}` 
              }
            ]
          ]
        }
      }
    );

    await ctx.reply(
      '–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∫—É—Ä–∞–∂–∏–∫–∏.', 
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–æ—Å–æ–±–∞–º –∑–∞—Ä–∞–±–æ—Ç–∫–∞', callback_data: 'earn' }]
          ]
        }
      }
    );
    await ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel');
  }
});

postVerificationScene.on('message', async (ctx) => {
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'earn' }]
        ]
      }
    }
  );
});

module.exports = postVerificationScene; 