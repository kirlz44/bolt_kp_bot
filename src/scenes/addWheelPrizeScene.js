const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const addWheelPrizeScene = new Scenes.BaseScene('add_wheel_prize_scene');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–µ
const STATES = {
  CHOOSE_TYPE: 'CHOOSE_TYPE',
  ENTER_NAME: 'ENTER_NAME',
  ENTER_VALUE: 'ENTER_VALUE',
  ENTER_PROBABILITY: 'ENTER_PROBABILITY'
};

addWheelPrizeScene.enter(async (ctx) => {
  ctx.scene.state.currentState = STATES.CHOOSE_TYPE;
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–∑–∞:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üíé –ö—É—Ä–∞–∂–∏–∫–∏', callback_data: 'prize_type_kurajiki' }],
        [{ text: 'üè∑ –°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä', callback_data: 'prize_type_discount' }],
        [{ text: 'üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑', callback_data: 'prize_type_special' }],
        [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_prize' }]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–∑–∞
addWheelPrizeScene.action(/prize_type_(.+)/, async (ctx) => {
  const type = ctx.match[1];
  ctx.scene.state.prizeData = { type };
  ctx.scene.state.currentState = STATES.ENTER_NAME;
  
  let message;
  switch (type) {
    case 'kurajiki':
      message = '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–∑–∞:';
      break;
    case 'discount':
      message = '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (–æ—Ç 5 –¥–æ 50):';
      break;
    case 'special':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞:';
      break;
  }
  
  await ctx.reply(message);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è/–Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–∞
addWheelPrizeScene.on('text', async (ctx) => {
  const state = ctx.scene.state;
  
  switch (state.currentState) {
    case STATES.ENTER_NAME:
      if (state.prizeData.type === 'kurajiki') {
        const value = parseInt(ctx.message.text);
        if (isNaN(value) || value <= 0) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤.');
        }
        state.prizeData.name = `${value} –∫—É—Ä–∞–∂–∏–∫–æ–≤`;
        state.prizeData.value = value;
      } else if (state.prizeData.type === 'discount') {
        const value = parseInt(ctx.message.text);
        if (isNaN(value) || value < 5 || value > 50) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 5 –¥–æ 50.');
        }
        state.prizeData.name = `–°–∫–∏–¥–∫–∞ ${value}%`;
        state.prizeData.value = value;
      } else {
        state.prizeData.name = ctx.message.text;
        state.prizeData.value = 0;
      }
      
      state.currentState = STATES.ENTER_PROBABILITY;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏–∑–∞ (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100):');
      break;
      
    case STATES.ENTER_PROBABILITY:
      const probability = parseFloat(ctx.message.text);
      if (isNaN(probability) || probability <= 0 || probability > 100) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –≤—Å–µ—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
      const existingPrizes = await prisma.wheelPrize.findMany({
        where: { active: true }
      });
      
      const totalProbability = existingPrizes.reduce((sum, prize) => sum + prize.probability, 0);
      if (totalProbability + probability > 100) {
        return ctx.reply(`–°—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø—Ä–µ–≤—ã—Å–∏—Ç 100%. –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: ${totalProbability}%. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–∞: ${(100 - totalProbability).toFixed(1)}%`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      try {
        await prisma.wheelPrize.create({
          data: {
            type: state.prizeData.type,
            name: state.prizeData.name,
            value: state.prizeData.value,
            probability: probability,
            active: true
          }
        });
        
        await ctx.reply('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–µ—Å–æ–º', callback_data: 'manage_wheel' }]
            ]
          }
        });
        await ctx.scene.leave();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
addWheelPrizeScene.action('cancel_add_prize', async (ctx) => {
  await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–µ—Å–æ–º', callback_data: 'manage_wheel' }]
      ]
    }
  });
  await ctx.scene.leave();
});

module.exports = addWheelPrizeScene; 