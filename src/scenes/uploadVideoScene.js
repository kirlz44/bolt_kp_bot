const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const { checkUserRole } = require('../models/user');
const prisma = new PrismaClient();

const uploadVideoScene = new Scenes.BaseScene('upload_video_scene');

uploadVideoScene.enter(async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
  const userRole = await checkUserRole(ctx.from.id);
  if (userRole !== 'admin' && userRole !== 'superadmin') {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'open_menu' }]
        ]
      }
    });
    return await ctx.scene.leave();
  }

  const qualificationId = ctx.scene.state.qualificationId;
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n' +
    '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel'
  );
});

uploadVideoScene.command('cancel', async (ctx) => {
  await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–∞', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_welcome_videos' }]
      ]
    }
  });
  await ctx.scene.leave();
});

uploadVideoScene.on('video', async (ctx) => {
  try {
    const qualificationId = ctx.scene.state.qualificationId;
    const fileId = ctx.message.video.file_id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const existingVideo = await prisma.welcomeVideo.findFirst({
      where: {
        qualification: `qualification_${qualificationId}`
      }
    });

    if (existingVideo) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ
      await prisma.welcomeVideo.update({
        where: { id: existingVideo.id },
        data: { fileId }
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await prisma.welcomeVideo.create({
        data: {
          qualification: `qualification_${qualificationId}`,
          fileId
        }
      });
    }

    await ctx.reply('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ', callback_data: 'manage_welcome_videos' }]
        ]
      }
    });
    await ctx.scene.leave();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_welcome_videos' }]
        ]
      }
    });
  }
});

uploadVideoScene.on('message', async (ctx) => {
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_welcome_videos' }]
      ]
    }
  });
});

module.exports = uploadVideoScene; 