const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const addProductScene = new Scenes.BaseScene('add_product_scene');

const STATES = {
  ENTER_NAME: 'ENTER_NAME',
  ENTER_DESCRIPTION: 'ENTER_DESCRIPTION',
  ENTER_PRICE_RUB: 'ENTER_PRICE_RUB',
  ENTER_PRICE_KUR: 'ENTER_PRICE_KUR',
  ENTER_STOCK: 'ENTER_STOCK',
  UPLOAD_IMAGE: 'UPLOAD_IMAGE'
};

addProductScene.enter(async (ctx) => {
  ctx.scene.state.productData = {};
  ctx.scene.state.currentState = STATES.ENTER_NAME;
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel)');
});

addProductScene.command('cancel', async (ctx) => {
  await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
      ]
    }
  });
  await ctx.scene.leave();
});

addProductScene.on('text', async (ctx) => {
  const state = ctx.scene.state;
  const text = ctx.message.text;

  switch (state.currentState) {
    case STATES.ENTER_NAME:
      state.productData.name = text;
      state.currentState = STATES.ENTER_DESCRIPTION;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
      break;

    case STATES.ENTER_DESCRIPTION:
      state.productData.description = text;
      state.currentState = STATES.ENTER_PRICE_RUB;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
      break;

    case STATES.ENTER_PRICE_RUB:
      const priceRub = parseFloat(text);
      if (isNaN(priceRub) || priceRub <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
      }
      state.productData.priceRub = priceRub;
      state.currentState = STATES.ENTER_PRICE_KUR;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
      break;

    case STATES.ENTER_PRICE_KUR:
      const priceKur = parseFloat(text);
      if (isNaN(priceKur) || priceKur <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
      }
      state.productData.priceKur = priceKur;
      state.currentState = STATES.ENTER_STOCK;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:');
      break;

    case STATES.ENTER_STOCK:
      const stock = parseInt(text);
      if (isNaN(stock) || stock < 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
      }
      state.productData.stock = stock;
      state.currentState = STATES.UPLOAD_IMAGE;
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:');
      break;
  }
});

addProductScene.on('photo', async (ctx) => {
  if (ctx.scene.state.currentState === STATES.UPLOAD_IMAGE) {
    try {
      const photo = ctx.message.photo[ctx.message.photo.length - 1];
      const productData = ctx.scene.state.productData;
      
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const product = await prisma.product.create({
        data: {
          ...productData,
          imageId: photo.file_id
        }
      });

      await ctx.reply(
        '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n' +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n` +
        `–¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
        `–ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä', callback_data: 'add_product' }],
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
            ]
          }
        }
      );

      await ctx.scene.leave();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel');
    }
  }
});

addProductScene.on('message', async (ctx) => {
  if (ctx.scene.state.currentState === STATES.UPLOAD_IMAGE) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã');
  }
});

module.exports = addProductScene; 