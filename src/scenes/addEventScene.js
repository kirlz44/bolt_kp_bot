const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const addEventScene = new Scenes.WizardScene(
  'add_event_scene',
  // –®–∞–≥ 1: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ
  async (ctx) => {
    ctx.wizard.state.title = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');
    return ctx.wizard.next();
  },
  // –®–∞–≥ 3: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
  async (ctx) => {
    ctx.wizard.state.description = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:');
    return ctx.wizard.next();
  },
  // –®–∞–≥ 4: –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
  async (ctx) => {
    try {
      const dateStr = ctx.message.text;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
      const match = dateStr.match(dateRegex);
      
      if (!match) {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 19:30'
        );
        return;
      }

      const [, day, month, year, hours, minutes] = match;
      const date = new Date(year, month - 1, day, hours, minutes);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
      if (isNaN(date.getTime())) {
        await ctx.reply(
          '–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞.\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.'
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
      if (date < new Date()) {
        await ctx.reply(
          '–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É.'
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
      if (hours > 23 || minutes > 59) {
        await ctx.reply(
          '–£–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n' +
          '–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59.'
        );
        return;
      }
      
      ctx.wizard.state.date = date;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:');
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã.\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 19:30'
      );
      return;
    }
  },
  // –®–∞–≥ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
  async (ctx) => {
    ctx.wizard.state.location = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:');
    return ctx.wizard.next();
  },
  // –®–∞–≥ 6: –°—Ç–æ–∏–º–æ—Å—Ç—å
  async (ctx) => {
    const seats = parseInt(ctx.message.text);
    if (isNaN(seats) || seats <= 0) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—Ç:');
      return;
    }
    ctx.wizard.state.seats = seats;
    await ctx.reply(
      '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" –∏–ª–∏ "0 0" –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: "1000 2000" –∏–ª–∏ "0 0"'
    );
    return ctx.wizard.next();
  },
  // –ü–æ—Å–ª–µ —à–∞–≥–∞ —Å —Ü–µ–Ω–æ–π –¥–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  async (ctx) => {
    const [priceRub, priceKur] = ctx.message.text.split(' ').map(Number);
    
    if (isNaN(priceRub) || isNaN(priceKur) || priceRub < 0 || priceKur < 0) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:');
      return;
    }

    ctx.wizard.state.priceRub = priceRub;
    ctx.wizard.state.priceKur = priceKur;

    await ctx.reply(
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_event_photo' }]
          ]
        }
      }
    );

    return ctx.wizard.next();
  },
  // –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async (ctx) => {
    try {
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) }
      });

      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      let imageId = null;
      if (ctx.message?.photo) {
        imageId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      }

      const event = await prisma.event.create({
        data: {
          title: ctx.wizard.state.title,
          description: ctx.wizard.state.description,
          date: ctx.wizard.state.date,
          location: ctx.wizard.state.location,
          seats: ctx.wizard.state.seats,
          priceRub: ctx.wizard.state.priceRub,
          priceKur: ctx.wizard.state.priceKur,
          imageId: imageId,
          creatorId: user.id
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const users = await prisma.user.findMany();
      for (const user of users) {
        try {
          const message = {
            caption: `üé™ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
                    `${event.title}\n` +
                    `üìÖ ${event.date.toLocaleDateString()}\n` +
                    `‚è∞ ${event.date.toLocaleTimeString()}\n` +
                    `üìç ${event.location}\n` +
                    `${event.description}\n\n` +
                    `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.priceRub > 0 ? `${event.priceRub}‚ÇΩ / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `register_event_${event.id}` }]
              ]
            }
          };

          if (imageId) {
            await ctx.telegram.sendPhoto(
              user.telegramId.toString(), 
              imageId, 
              message
            );
          } else {
            await ctx.telegram.sendMessage(
              user.telegramId.toString(), 
              message.caption,
              {
                parse_mode: message.parse_mode,
                reply_markup: message.reply_markup
              }
            );
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
        }
      }

      await ctx.reply(
        '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]
            ]
          }
        }
      );
      return ctx.scene.leave();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
addEventScene.action('skip_event_photo', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(ctx.from.id) }
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const event = await prisma.event.create({
      data: {
        title: ctx.wizard.state.title,
        description: ctx.wizard.state.description,
        date: ctx.wizard.state.date,
        location: ctx.wizard.state.location,
        seats: ctx.wizard.state.seats,
        priceRub: ctx.wizard.state.priceRub,
        priceKur: ctx.wizard.state.priceKur,
        imageId: null,
        creatorId: user.id
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const users = await prisma.user.findMany();
    for (const user of users) {
      try {
        await ctx.telegram.sendMessage(
          user.telegramId.toString(),
          `üé™ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
          `${event.title}\n` +
          `üìÖ ${event.date.toLocaleDateString()}\n` +
          `‚è∞ ${event.date.toLocaleTimeString()}\n` +
          `üìç ${event.location}\n` +
          `${event.description}\n\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.priceRub > 0 ? `${event.priceRub}‚ÇΩ / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`,
          {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: `register_event_${event.id}` }]
              ]
            }
          }
        );
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
      }
    }

    await ctx.reply(
      '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]
          ]
        }
      }
    );
    return ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return ctx.scene.leave();
  }
});

module.exports = addEventScene; 