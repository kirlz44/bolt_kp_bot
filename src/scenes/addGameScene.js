const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const { validateDateTime } = require('../utils/dateValidation');
const { notifyAllUsersAboutNewGame } = require('../services/notifications');
const prisma = new PrismaClient();

const addGameScene = new Scenes.WizardScene(
  'add_game_scene',
  // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã
  async (ctx) => {
    try {
      ctx.scene.session.gameData = {};
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:');
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
  async (ctx) => {
    try {
      ctx.scene.session.gameData.title = ctx.message.text;
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 19:30'
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
  async (ctx) => {
    try {
      const dateTimeStr = ctx.message.text;
      const validation = validateDateTime(dateTimeStr);

      if (!validation.isValid) {
        await ctx.reply(
          `‚ùå ${validation.error}\n\n` +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú'
        );
        return; // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
      }

      ctx.scene.session.gameData.date = validation.date;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–≥—Ä—ã:');
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 4: –¶–µ–Ω–∞
  async (ctx) => {
    try {
      if (!ctx.message?.text) return;
      ctx.scene.session.gameData.location = ctx.message.text;
      
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò"\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 1000 2000'
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
  async (ctx) => {
    try {
      if (!ctx.message?.text) return;
      const [priceRub, priceKur] = ctx.message.text.split(' ').map(Number);
      
      if (isNaN(priceRub) || isNaN(priceKur)) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò"');
        return;
      }
      
      ctx.scene.session.gameData.priceRub = priceRub;
      ctx.scene.session.gameData.priceKur = priceKur;
      
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:');
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 6: –û–ø–∏—Å–∞–Ω–∏–µ
  async (ctx) => {
    try {
      if (!ctx.message?.text) return;
      const seats = parseInt(ctx.message.text);
      
      if (isNaN(seats) || seats <= 0) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
        return;
      }
      
      ctx.scene.session.gameData.seats = seats;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:');
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 7: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  async (ctx) => {
    try {
      if (!ctx.message?.text) return;
      ctx.scene.session.gameData.description = ctx.message.text;
      
      await ctx.reply(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):',
        {
          reply_markup: {
            inline_keyboard: [[{ text: '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_image' }]]
          }
        }
      );
      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 8: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  async (ctx) => {
    try {
      if (ctx.message?.photo) {
        ctx.scene.session.gameData.imageId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      }
      
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID:', ctx.from.id);
      const user = await prisma.user.findUnique({
        where: { telegramId: BigInt(ctx.from.id) }
      });
      console.log('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);

      if (!user) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        ...ctx.scene.session.gameData,
        creatorId: user.id
      });

      const game = await prisma.game.create({
        data: {
          ...ctx.scene.session.gameData,
          creator: {
            connect: { id: user.id }
          }
        }
      });
      console.log('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', game);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      await notifyAllUsersAboutNewGame(ctx, game);

      await ctx.reply('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
      await ctx.scene.leave();

      await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏', callback_data: 'manage_games' }]
          ]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
addGameScene.action('cancel_add_game', async (ctx) => {
  try {
    await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ');
    await ctx.scene.leave();
    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏', callback_data: 'manage_games' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
addGameScene.action('skip_image', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(ctx.from.id) }
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const game = await prisma.game.create({
      data: {
        ...ctx.scene.session.gameData,
        creator: {
          connect: { id: user.id }
        }
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await notifyAllUsersAboutNewGame(ctx, game);

    await ctx.reply('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    await ctx.scene.leave();

    await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏', callback_data: 'manage_games' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }
});

module.exports = addGameScene; 