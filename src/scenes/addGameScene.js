const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const addGameScene = new Scenes.BaseScene('add_game_scene');

const STATES = {
  ENTER_TITLE: 'ENTER_TITLE',
  ENTER_DESCRIPTION: 'ENTER_DESCRIPTION',
  ENTER_DATE: 'ENTER_DATE',
  ENTER_TIME: 'ENTER_TIME',
  ENTER_LOCATION: 'ENTER_LOCATION',
  ENTER_PRICE_RUB: 'ENTER_PRICE_RUB',
  ENTER_PRICE_KUR: 'ENTER_PRICE_KUR',
  ENTER_SEATS: 'ENTER_SEATS',
  UPLOAD_IMAGE: 'UPLOAD_IMAGE',
  ENTER_PAYMENT_TYPE: 'ENTER_PAYMENT_TYPE',
  ENTER_CARD_NUMBER: 'ENTER_CARD_NUMBER',
  ENTER_PHONE_NUMBER: 'ENTER_PHONE_NUMBER'
};

addGameScene.enter(async (ctx) => {
  ctx.scene.state.gameData = {};
  ctx.scene.state.currentState = STATES.ENTER_TITLE;
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:\n(–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel)');
});

addGameScene.command('cancel', async (ctx) => {
  await ctx.reply('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω–æ', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏', callback_data: 'manage_games' }]
      ]
    }
  });
  await ctx.scene.leave();
});

addGameScene.on('text', async (ctx) => {
  const state = ctx.scene.state;
  const text = ctx.message.text;

  switch (state.currentState) {
    case STATES.ENTER_TITLE:
      state.gameData.title = text;
      state.currentState = STATES.ENTER_DESCRIPTION;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:');
      break;

    case STATES.ENTER_DESCRIPTION:
      state.gameData.description = text;
      state.currentState = STATES.ENTER_DATE;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):');
      break;

    case STATES.ENTER_DATE:
      const dateRegex = /^\d{2}\.\d{2}\.\d{4}$/;
      if (!dateRegex.test(text)) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
      }
      state.gameData.date = text;
      state.currentState = STATES.ENTER_TIME;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):');
      break;

    case STATES.ENTER_TIME:
      const timeRegex = /^\d{2}:\d{2}$/;
      if (!timeRegex.test(text)) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      }
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
      const [day, month, year] = state.gameData.date.split('.');
      const [hours, minutes] = text.split(':');
      state.gameData.dateTime = new Date(year, month - 1, day, hours, minutes);
      
      state.currentState = STATES.ENTER_LOCATION;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:');
      break;

    case STATES.ENTER_LOCATION:
      state.gameData.location = text;
      state.currentState = STATES.ENTER_PRICE_RUB;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
      break;

    case STATES.ENTER_PRICE_RUB:
      const priceRub = parseFloat(text);
      if (isNaN(priceRub) || priceRub < 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
      }
      state.gameData.priceRub = priceRub;
      state.currentState = STATES.ENTER_PRICE_KUR;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):');
      break;

    case STATES.ENTER_PRICE_KUR:
      const priceKur = parseFloat(text);
      if (isNaN(priceKur) || priceKur < 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
      }
      state.gameData.priceKur = priceKur;
      state.currentState = STATES.ENTER_SEATS;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:');
      break;

    case STATES.ENTER_SEATS:
      const seats = parseInt(text);
      if (isNaN(seats) || seats <= 0) {
        return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç');
      }
      state.gameData.seats = seats;
      state.currentState = STATES.UPLOAD_IMAGE;
      await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
      break;
  }
});

addGameScene.command('skip', async (ctx) => {
  if (ctx.scene.state.currentState === STATES.UPLOAD_IMAGE) {
    ctx.scene.state.gameData.imageId = null;
    await createGame(ctx);
  } else {
    await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ /skip –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
});

addGameScene.hears('/skip', async (ctx) => {
  if (ctx.scene.state.currentState === STATES.UPLOAD_IMAGE) {
    ctx.scene.state.gameData.imageId = null;
    await createGame(ctx);
  } else {
    await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ /skip –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
});

addGameScene.on('photo', async (ctx) => {
  if (ctx.scene.state.currentState === STATES.UPLOAD_IMAGE) {
    ctx.scene.state.gameData.imageId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    await createGame(ctx);
  }
});

async function createGame(ctx) {
  try {
    const gameData = ctx.scene.state.gameData;
    const telegramId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId }
    });

    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å - –ø–∞—Ä—Ç–Ω–µ—Ä, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    if (user.role === 'partner') {
      if (!gameData.paymentType) {
        ctx.scene.state.currentState = STATES.ENTER_PAYMENT_TYPE;
        return await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–µ–º–∞ –æ–ø–ª–∞—Ç—ã:',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: 'payment_card' }],
                [{ text: 'üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', callback_data: 'payment_phone' }]
              ]
            }
          }
        );
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const game = await prisma.game.create({
      data: {
        title: gameData.title,
        description: gameData.description || '',
        date: gameData.dateTime,
        location: gameData.location,
        priceRub: gameData.priceRub,
        priceKur: gameData.priceKur,
        seats: gameData.seats,
        imageId: gameData.imageId || null,
        paymentType: gameData.paymentType,
        paymentDetails: gameData.paymentDetails,
        creator: {
          connect: {
            id: user.id
          }
        }
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await ctx.reply(
      '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n' +
      `–ù–∞–∑–≤–∞–Ω–∏–µ: ${game.title}\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ: ${game.description}\n` +
      `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
      `–í—Ä–µ–º—è: ${game.date.toLocaleTimeString()}\n` +
      `–ú–µ—Å—Ç–æ: ${game.location}\n` +
      `–¶–µ–Ω–∞: ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `–ú–µ—Å—Ç: ${game.seats}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–≥—Ä—É', callback_data: 'add_game' }],
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏', callback_data: 'manage_games' }]
          ]
        }
      }
    );

    await ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel');
  }
}

addGameScene.action('payment_card', async (ctx) => {
  ctx.scene.state.gameData.paymentType = 'card';
  ctx.scene.state.currentState = STATES.ENTER_CARD_NUMBER;
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π:');
});

addGameScene.action('payment_phone', async (ctx) => {
  ctx.scene.state.gameData.paymentType = 'phone';
  ctx.scene.state.currentState = STATES.ENTER_PHONE_NUMBER;
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π:');
});

module.exports = addGameScene; 