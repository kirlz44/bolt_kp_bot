const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const editEventScene = new Scenes.BaseScene('edit_event_scene');

editEventScene.enter(async (ctx) => {
  await ctx.reply(ctx.scene.state.promptMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_edit_event' }]
      ]
    }
  });
});

editEventScene.on('text', async (ctx) => {
  try {
    const { id: eventId, param } = ctx.session.editingEvent;
    const newValue = ctx.message.text;

    let updateData = {};
    
    switch (param) {
      case 'title':
        updateData = { title: newValue };
        break;
      case 'date':
        const [date, time] = newValue.split(' ');
        const [day, month, year] = date.split('.');
        const [hours, minutes] = time.split(':');
        const newDate = new Date(year, month - 1, day, hours, minutes);
        
        if (isNaN(newDate.getTime())) {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú');
          return;
        }
        
        updateData = { date: newDate };
        break;
      case 'location':
        updateData = { location: newValue };
        break;
      case 'price':
        const [priceRub, priceKur] = newValue.split(' ').map(Number);
        if (isNaN(priceRub) || isNaN(priceKur) || priceRub < 0 || priceKur < 0) {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" –∏–ª–∏ "0 0"');
          return;
        }
        updateData = { priceRub, priceKur };
        break;
      case 'seats':
        const seats = parseInt(newValue);
        if (isNaN(seats) || seats <= 0) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
          return;
        }
        updateData = { seats };
        break;
      case 'description':
        updateData = { description: newValue };
        break;
    }

    const event = await prisma.event.update({
      where: { id: eventId },
      data: updateData
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    if (param === 'date' || param === 'location') {
      const registrations = await prisma.eventRegistration.findMany({
        where: { eventId },
        include: { user: true }
      });

      for (const reg of registrations) {
        try {
          await ctx.telegram.sendMessage(
            reg.user.telegramId,
            `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "${event.title}"\n\n` +
            `${param === 'date' ? `–ù–æ–≤–∞—è –¥–∞—Ç–∞: ${event.date.toLocaleDateString()} ${event.date.toLocaleTimeString()}` : 
              `–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: ${event.location}`}`
          );
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${reg.user.telegramId}:`, error);
        }
      }
    }

    await ctx.reply('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    await ctx.scene.leave();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editMessage = '*–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*';
    const editKeyboard = [
      [{ text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_event_title_${eventId}` }],
      [{ text: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data: `edit_event_date_${eventId}` }],
      [{ text: 'üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', callback_data: `edit_event_location_${eventId}` }],
      [{ text: 'üí∞ –¶–µ–Ω–∞', callback_data: `edit_event_price_${eventId}` }],
      [{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç', callback_data: `edit_event_seats_${eventId}` }],
      [{ text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_event_description_${eventId}` }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]
    ];

    await ctx.reply(editMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: editKeyboard
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

editEventScene.action('cancel_edit_event', async (ctx) => {
  await ctx.scene.leave();
  await ctx.editMessageText('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏', callback_data: 'manage_events' }]
      ]
    }
  });
});

module.exports = editEventScene; 