const { Scenes } = require('telegraf');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const editProductScene = new Scenes.BaseScene('edit_product_scene');

const STATES = {
  SELECT_PRODUCT: 'SELECT_PRODUCT',
  SELECT_FIELD: 'SELECT_FIELD',
  ENTER_VALUE: 'ENTER_VALUE'
};

editProductScene.enter(async (ctx) => {
  ctx.scene.state.currentState = STATES.SELECT_PRODUCT;
  const products = await prisma.product.findMany();
  
  const keyboard = products.map(product => ([{
    text: `${product.name} (${product.priceRub}‚ÇΩ)`,
    callback_data: `edit_product_${product.id}`
  }]));
  
  keyboard.push([{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }]);
  
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
    reply_markup: { inline_keyboard: keyboard }
  });
});

editProductScene.action(/edit_product_(\d+)/, async (ctx) => {
  const productId = parseInt(ctx.match[1]);
  ctx.scene.state.productId = productId;
  ctx.scene.state.currentState = STATES.SELECT_FIELD;
  
  const product = await prisma.product.findUnique({
    where: { id: productId }
  });
  
  const message = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${product.name}\n` +
    `–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n` +
    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.name}\n` +
    `–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}\n` +
    `–¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
    `–ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;
  
  const keyboard = [
    [{ text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: 'edit_name' }],
    [{ text: 'üìã –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_description' }],
    [{ text: 'üí∞ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö', callback_data: 'edit_price_rub' }],
    [{ text: 'üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö', callback_data: 'edit_price_kur' }],
    [{ text: 'üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data: 'edit_stock' }],
    [{ text: 'üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data: 'edit_image' }],
    [{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }]
  ];
  
  await ctx.reply(message, {
    reply_markup: { inline_keyboard: keyboard }
  });
});

editProductScene.action(/edit_(name|description|price_rub|price_kur|stock|image)/, async (ctx) => {
  const field = ctx.match[1];
  ctx.scene.state.editingField = field;
  ctx.scene.state.currentState = STATES.ENTER_VALUE;
  
  let message;
  switch (field) {
    case 'name':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:';
      break;
    case 'description':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:';
      break;
    case 'price_rub':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):';
      break;
    case 'price_kur':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):';
      break;
    case 'stock':
      message = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ:';
      break;
    case 'image':
      message = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:';
      break;
  }
  
  await ctx.reply(message, {
    reply_markup: {
      inline_keyboard: [[{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_edit' }]]
    }
  });
});

editProductScene.on('text', async (ctx) => {
  if (ctx.scene.state.currentState !== STATES.ENTER_VALUE) return;
  
  const { productId, editingField } = ctx.scene.state;
  const value = ctx.message.text;
  
  try {
    const updateData = {};
    
    switch (editingField) {
      case 'name':
        updateData.name = value;
        break;
      case 'description':
        updateData.description = value;
        break;
      case 'price_rub':
        const priceRub = parseFloat(value);
        if (isNaN(priceRub) || priceRub <= 0) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
        }
        updateData.priceRub = priceRub;
        break;
      case 'price_kur':
        const priceKur = parseFloat(value);
        if (isNaN(priceKur) || priceKur <= 0) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
        }
        updateData.priceKur = priceKur;
        break;
      case 'stock':
        const stock = parseInt(value);
        if (isNaN(stock) || stock < 0) {
          return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
        }
        updateData.stock = stock;
        break;
    }
    
    await prisma.product.update({
      where: { id: productId },
      data: updateData
    });
    
    await ctx.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: `edit_product_${productId}` }],
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

editProductScene.on('photo', async (ctx) => {
  if (ctx.scene.state.currentState !== STATES.ENTER_VALUE || ctx.scene.state.editingField !== 'image') return;
  
  try {
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    await prisma.product.update({
      where: { id: ctx.scene.state.productId },
      data: { imageId: photo.file_id }
    });
    
    await ctx.reply('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: `edit_product_${ctx.scene.state.productId}` }],
          [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

editProductScene.action('cancel_edit', async (ctx) => {
  await ctx.reply('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
      ]
    }
  });
  await ctx.scene.leave();
});

module.exports = editProductScene; 