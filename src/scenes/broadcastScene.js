const { Scenes } = require('telegraf');
const { createScheduledBroadcast } = require('../services/broadcastService');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

const broadcastScene = new Scenes.WizardScene(
  'broadcast_scene',
  // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ
  async (ctx) => {
    try {
      const { broadcastType, qualification } = ctx.scene.state;
      
      await ctx.reply(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n' +
        '–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.\n' +
        '–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel',
        {
          reply_markup: {
            remove_keyboard: true
          }
        }
      );

      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 2: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
  async (ctx) => {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (ctx.message?.photo) {
        ctx.scene.state.photo = ctx.message.photo[ctx.message.photo.length - 1].file_id;
        ctx.scene.state.caption = ctx.message.caption || '';
      } else if (ctx.message?.text) {
        ctx.scene.state.message = ctx.message.text;
      } else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é.');
        return;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
      let previewMessage = 'üì® *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n';
      
      if (ctx.scene.state.photo) {
        await ctx.replyWithPhoto(ctx.scene.state.photo, {
          caption: previewMessage + (ctx.scene.state.caption || ''),
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'broadcast_send_now' },
                { text: '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'broadcast_schedule' }
              ],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'broadcast_cancel' }]
            ]
          }
        });
      } else {
        await ctx.reply(previewMessage + ctx.scene.state.message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'broadcast_send_now' },
                { text: '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'broadcast_schedule' }
              ],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'broadcast_cancel' }]
            ]
          }
        });
      }

      return ctx.wizard.next();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 3: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ)
  async (ctx) => {
    try {
      if (!ctx.callbackQuery) return;

      const action = ctx.callbackQuery.data;

      switch (action) {
        case 'broadcast_send_now':
          await executeBroadcast(ctx);
          await ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º', callback_data: 'broadcast' }]
              ]
            }
          });
          return ctx.scene.leave();

        case 'broadcast_schedule':
          await ctx.reply(
            'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n' +
            '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30'
          );
          return ctx.wizard.next();

        case 'broadcast_cancel':
          await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
          return ctx.scene.leave();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  },
  // –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  async (ctx) => {
    try {
      if (!ctx.message?.text) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.');
        return;
      }

      const dateStr = ctx.message.text;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
      const dateRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s(\d{2}):(\d{2})$/;
      const match = dateStr.match(dateRegex);
      
      if (!match) {
        await ctx.reply(
          '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30'
        );
        return;
      }

      const [, day, month, year, hours, minutes] = match;
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
      const moscowDate = new Date();
      moscowDate.setFullYear(parseInt(year));
      moscowDate.setMonth(parseInt(month) - 1); // –ú–µ—Å—è—Ü—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
      moscowDate.setDate(parseInt(day));
      moscowDate.setHours(parseInt(hours));
      moscowDate.setMinutes(parseInt(minutes));
      moscowDate.setSeconds(0);
      moscowDate.setMilliseconds(0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
      const now = new Date();
      if (moscowDate <= now) {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
      await createScheduledBroadcast({
        type: ctx.scene.state.broadcastType,
        qualification: ctx.scene.state.qualification,
        message: ctx.scene.state.message || '',
        photo: ctx.scene.state.photo || null,
        caption: ctx.scene.state.caption || '',
        scheduledFor: moscowDate,
        createdBy: ctx.from.id
      });

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞
      const formatter = new Intl.DateTimeFormat('ru-RU', {
        dateStyle: 'full',
        timeStyle: 'short',
        timeZone: 'Europe/Moscow'
      });

      await ctx.reply(
        '‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ' + formatter.format(moscowDate) + ' (–ú–°–ö)',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å—Å—ã–ª–∫–∞–º', callback_data: 'broadcast' }]
            ]
          }
        }
      );

      return ctx.scene.leave();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return ctx.scene.leave();
    }
  }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
broadcastScene.command('cancel', async (ctx) => {
  await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ');
  return ctx.scene.leave();
});

// –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function executeBroadcast(ctx) {
  const { broadcastType, qualification, message, photo, caption } = ctx.scene.state;

  let users = [];
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
  switch (broadcastType) {
    case 'all':
      users = await prisma.user.findMany();
      break;
    case 'partners':
      users = await prisma.user.findMany({
        where: { role: 'partner' }
      });
      break;
    case 'qualification':
      users = await prisma.user.findMany({
        where: { qualification }
      });
      break;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  let successCount = 0;
  for (const user of users) {
    try {
      if (photo) {
        await ctx.telegram.sendPhoto(Number(user.telegramId), photo, {
          caption: caption || ''
        });
      } else {
        await ctx.telegram.sendMessage(Number(user.telegramId), message);
      }
      successCount++;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
    }
  }

  return successCount;
}

module.exports = broadcastScene; 