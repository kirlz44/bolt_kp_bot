const { PrismaClient } = require('@prisma/client');
const crypto = require('crypto');
const prisma = new PrismaClient();
const { sendMessageToUser } = require('../utils/telegram');

module.exports = async (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã:', req.query);
    const { OutSum, InvId, SignatureValue, Shp_description } = req.query;
    
    if (!OutSum || !InvId || !SignatureValue) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return res.status(400).send('Missing required parameters');
    }

    const password2 = process.env.ROBOKASSA_TEST_MODE === 'true' 
      ? process.env.ROBOKASSA_TEST_PASSWORD2 
      : process.env.ROBOKASSA_PROD_PASSWORD2;

    const expectedSignature = crypto
      .createHash('md5')
      .update(`${OutSum}:${InvId}:${password2}${Shp_description ? `:Shp_description=${Shp_description}` : ''}`)
      .digest('hex')
      .toUpperCase();

    if (SignatureValue.toUpperCase() !== expectedSignature) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞');
      return res.status(400).send('Invalid signature');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const transaction = await prisma.$transaction(async (prisma) => {
      const updatedTransaction = await prisma.transaction.update({
        where: { id: parseInt(InvId, 10) },
        data: { 
          status: 'success',
          paidAt: new Date()
        }
      });

      const user = await prisma.user.findUnique({ 
        where: { id: updatedTransaction.userId },
        select: { 
          id: true,
          telegramId: true,
          firstName: true,
          username: true
        }
      });

      return { transaction: updatedTransaction, user };
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userMessage = `‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
      `üí∞ –°—É–º–º–∞: ${OutSum} —Ä—É–±.\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${Shp_description || transaction.transaction.description}\n` +
      `üÜî –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${InvId}`;

    await sendMessageToUser(transaction.user.telegramId, userMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const adminMessage = `üí∞ –ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!\n\n` +
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${transaction.user.firstName} ` +
      `${transaction.user.username ? `(@${transaction.user.username})` : ''}\n` +
      `üíµ –°—É–º–º–∞: ${OutSum} —Ä—É–±.\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${Shp_description || transaction.transaction.description}\n` +
      `üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${InvId}\n` +
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

    await sendMessageToUser(process.env.ADMIN_CHAT_ID, adminMessage);

    console.log(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ #${InvId} –Ω–∞ —Å—É–º–º—É ${OutSum} —Ä—É–±.`);
    return res.send('OK');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º OK,
    // —á—Ç–æ–±—ã –†–æ–±–æ–∫–∞—Å—Å–∞ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    return res.send('OK');
  }
};
