const { PrismaClient } = require('@prisma/client');
const crypto = require('crypto');
const prisma = new PrismaClient();
const { sendMessageToUser } = require('../utils/telegram');

/**
 * –ù–∞—á–∏—Å–ª—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–∫—É–ø–∫—É
 */
async function processReferralBonuses(userId, amount) {
  try {
    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const firstLevelReferral = await prisma.referral.findFirst({
      where: { userId },
      include: { referrer: true }
    });

    const bonuses = {
      firstLevel: null,
      secondLevel: null
    };

    if (firstLevelReferral) {
      // –ù–∞—á–∏—Å–ª—è–µ–º 5% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
      const firstLevelBonus = Math.floor(amount * 0.05);
      await prisma.user.update({
        where: { id: firstLevelReferral.referrerId },
        data: { balance: { increment: firstLevelBonus } }
      });

      bonuses.firstLevel = {
        userId: firstLevelReferral.referrerId,
        bonus: firstLevelBonus,
        telegramId: firstLevelReferral.referrer.telegramId
      };

      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
      const secondLevelReferral = await prisma.referral.findFirst({
        where: { userId: firstLevelReferral.referrerId },
        include: { referrer: true }
      });

      if (secondLevelReferral) {
        // –ù–∞—á–∏—Å–ª—è–µ–º 2% –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
        const secondLevelBonus = Math.floor(amount * 0.02);
        await prisma.user.update({
          where: { id: secondLevelReferral.referrerId },
          data: { balance: { increment: secondLevelBonus } }
        });

        bonuses.secondLevel = {
          userId: secondLevelReferral.referrerId,
          bonus: secondLevelBonus,
          telegramId: secondLevelReferral.referrer.telegramId
        };
      }
    }

    return bonuses;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤:', error);
    return null;
  }
}

module.exports = async (req, res) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã:', req.query);
    const { OutSum, InvId, SignatureValue, Shp_description } = req.query;
    
    if (!OutSum || !InvId || !SignatureValue) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å–µ');
      return res.status(400).send('Missing required parameters');
    }

    const password2 = process.env.ROBOKASSA_TEST_MODE === 'true' 
      ? process.env.ROBOKASSA_TEST_PASSWORD2 
      : process.env.ROBOKASSA_PROD_PASSWORD2;

    const expectedSignature = crypto
      .createHash('md5')
      .update(`${OutSum}:${InvId}:${password2}${Shp_description ? `:Shp_description=${Shp_description}` : ''}`)
      .digest('hex')
      .toUpperCase();

    if (SignatureValue.toUpperCase() !== expectedSignature) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞');
      return res.status(400).send('Invalid signature');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const transaction = await prisma.$transaction(async (prisma) => {
      const updatedTransaction = await prisma.transaction.update({
        where: { id: parseInt(InvId, 10) },
        data: { 
          status: 'success',
          paidAt: new Date()
        },
        include: {
          product: true,
          event: true
        }
      });

      const user = await prisma.user.findUnique({ 
        where: { id: updatedTransaction.userId },
        select: { 
          id: true,
          telegramId: true,
          firstName: true,
          username: true
        }
      });

      return { transaction: updatedTransaction, user };
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
    const referralBonuses = await processReferralBonuses(
      transaction.transaction.userId,
      parseFloat(OutSum)
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const userMessage = [
      '‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!',
      '',
      `üí∞ –°—É–º–º–∞: ${OutSum} —Ä—É–±.`,
      `üìù ${transaction.transaction.product ? '–¢–æ–≤–∞—Ä' : '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'}: ${
        transaction.transaction.product?.name || 
        transaction.transaction.event?.name || 
        transaction.transaction.description
      }`,
      `üÜî –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${InvId}`,
      '',
      'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!'
    ].join('\n');

    await sendMessageToUser(transaction.user.telegramId, userMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if (referralBonuses?.firstLevel) {
      await sendMessageToUser(
        referralBonuses.firstLevel.telegramId,
        `üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${referralBonuses.firstLevel.bonus} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!`
      );
    }

    if (referralBonuses?.secondLevel) {
      await sendMessageToUser(
        referralBonuses.secondLevel.telegramId,
        `üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${referralBonuses.secondLevel.bonus} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ –ø–æ–∫—É–ø–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è!`
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const adminMessage = [
      'üí∞ –ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!',
      '',
      `üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${transaction.user.firstName} ${transaction.user.username ? `(@${transaction.user.username})` : ''}`,
      `üíµ –°—É–º–º–∞: ${OutSum} —Ä—É–±.`,
      `üìù ${transaction.transaction.product ? '–¢–æ–≤–∞—Ä' : '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'}: ${
        transaction.transaction.product?.name || 
        transaction.transaction.event?.name || 
        transaction.transaction.description
      }`,
      `üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${InvId}`,
      `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`,
      '',
      'üíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:'
    ];

    if (referralBonuses?.firstLevel) {
      adminMessage.push(`‚îî –£—Ä–æ–≤–µ–Ω—å 1: ${referralBonuses.firstLevel.bonus} –∫—É—Ä–∞–∂–∏–∫–æ–≤`);
    }
    if (referralBonuses?.secondLevel) {
      adminMessage.push(`‚îî –£—Ä–æ–≤–µ–Ω—å 2: ${referralBonuses.secondLevel.bonus} –∫—É—Ä–∞–∂–∏–∫–æ–≤`);
    }
    if (!referralBonuses?.firstLevel && !referralBonuses?.secondLevel) {
      adminMessage.push('‚îî –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
    }

    await sendMessageToUser(process.env.ADMIN_CHAT_ID, adminMessage.join('\n'));

    console.log(`–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–ª–∞—Ç–µ–∂ #${InvId} –Ω–∞ —Å—É–º–º—É ${OutSum} —Ä—É–±.`);
    return res.send('OK');

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º OK,
    // —á—Ç–æ–±—ã –†–æ–±–æ–∫–∞—Å—Å–∞ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    return res.send('OK');
  }
};
