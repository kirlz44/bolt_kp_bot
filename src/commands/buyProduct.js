const { PrismaClient } = require('@prisma/client');
const { generatePaymentUrl } = require('../services/robokassa');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    const productId = parseInt(ctx.callbackQuery.data.split('_')[3]);
    const userId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const product = await prisma.product.findUnique({
      where: { id: productId }
    });

    if (!product) {
      return ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (product.stock <= 0) {
      return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞
    const discountCode = ctx.session?.discountCode;
    let finalPrice = product.priceRub;

    if (discountCode && discountCode.startsWith('WHEEL') && discountCode.includes('D')) {
      const discountPercent = parseInt(discountCode.match(/D(\d+)/)[1]);
      finalPrice = Math.round(product.priceRub * (1 - discountPercent / 100));
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const isTestMode = process.env.ROBOKASSA_TEST_MODE === 'true';
    const paymentUrl = generatePaymentUrl(
      finalPrice,
      `–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞: ${product.name}`,
      isTestMode
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      `–î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ "${product.name}" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
      `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${finalPrice}‚ÇΩ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }],
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `view_product_${productId}` }]
          ]
        }
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
