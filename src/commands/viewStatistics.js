const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const totalUsers = await prisma.user.count();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫—É—Ä–∞–∂–∏–∫–æ–≤
    const totalKurajiki = await prisma.user.aggregate({
      _sum: {
        balance: true
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    const topReferrers = await prisma.referral.groupBy({
      by: ['referrerId'],
      _count: {
        userId: true
      },
      orderBy: {
        _count: {
          userId: 'desc'
        }
      },
      take: 10
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    const productsStats = await prisma.product.aggregate({
      _count: {
        id: true
      },
      where: {
        stock: {
          gt: 0
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º
    const gamesStats = await prisma.game.groupBy({
      by: ['id'],
      _count: {
        id: true
      },
      where: {
        date: {
          gte: new Date()
        }
      }
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n';
    message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n`;
    message += `üíé –í—Å–µ–≥–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤: ${totalKurajiki._sum.balance || 0}\n\n`;
    
    message += 'üèÜ *–¢–æ–ø-10 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:*\n';
    for (const ref of topReferrers) {
      const user = await prisma.user.findUnique({
        where: { id: ref.referrerId }
      });
      if (user) {
        message += `- ID: ${user.telegramId}, –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${ref._count.userId}\n`;
      }
    }

    message += '\nüì¶ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:*\n';
    message += `–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productsStats._count.id}\n`;

    message += '\nüéÆ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:*\n';
    message += `–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏–≥—Ä: ${gamesStats.length}\n`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_stats' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
};
