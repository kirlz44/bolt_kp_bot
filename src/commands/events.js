const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const events = await prisma.event.findMany({
      where: {
        seats: {
          gt: 0
        }
      }
    });

    let message;
    let keyboard;

    if (events.length > 0) {
      message = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n';
      events.forEach(event => {
        message += `–ù–∞–∑–≤–∞–Ω–∏–µ: ${event.title}\n–î–∞—Ç–∞: ${event.date}\n–ú–µ—Å—Ç–æ: ${event.location}\n–¶–µ–Ω–∞: ${event.priceRub} —Ä—É–±. / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞: ${event.seats}\n\n`;
      });

      keyboard = events.map(event => ([
        { text: event.title, callback_data: `view_event_${event.id}` }
      ]));
    } else {
      message = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.';
      keyboard = [];
    }

    keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } else {
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
