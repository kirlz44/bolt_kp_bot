const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const games = await prisma.game.findMany({
      where: {
        date: {
          gte: new Date() // –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã
        }
      },
      orderBy: {
        date: 'asc'
      }
    });

    if (games.length === 0) {
      return ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
          ]
        }
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
    const keyboard = games.map(game => ([{
      text: `${game.title} - ${game.date.toLocaleDateString()}`,
      callback_data: `view_game_${game.id}`
    }]));

    keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

    await ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:', {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
