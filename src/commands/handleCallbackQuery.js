const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = ctx.state.userRole;

    switch (data) {
      case 'start_bot':
        await ctx.reply('–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ –≤—ã', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üë®‚Äçüíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç', callback_data: 'qualification_1' }],
              [{ text: 'üéÆ –ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫, –ø—Ä–æ–≤–æ–∂—É –∏–≥—Ä—ã', callback_data: 'qualification_2' }],
              [{ text: 'üé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π', callback_data: 'qualification_3' }],
              [{ text: 'üë®‚Äçüè´ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä', callback_data: 'qualification_4' }],
              [{ text: 'üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ HR', callback_data: 'qualification_5' }],
              [{ text: 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –≤–∞—à–∞ –¥–≤–∏–∂—É—Ö–∞', callback_data: 'qualification_6' }],
              [{ text: 'üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', callback_data: 'qualification_7' }],
              [{ text: 'üé≤ –ê–≤—Ç–æ—Ä –∏–≥—Ä', callback_data: 'qualification_8' }],
              [{ text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥', callback_data: 'qualification_9' }],
              [{ text: 'üé® –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', callback_data: 'qualification_10' }],
              [{ text: 'üîÑ –°–µ—Ç–µ–≤–æ–π MLM-–±–∏–∑–Ω–µ—Å', callback_data: 'qualification_11' }],
              [{ text: 'üíÖ –ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞', callback_data: 'qualification_12' }]
            ]
          }
        });
        break;

      case data.match(/^qualification_\d+/)?.[0]:
        const qualificationNumber = data.split('_')[1];
        await handleQualification(ctx, qualificationNumber);
        break;

      case 'open_menu':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É menu
        require('./menu')(ctx);
        break;

      case 'check_balance':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É balance
        require('./balance')(ctx);
        break;

      case 'how_to_earn':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É earn
        require('./earn')(ctx);
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∏–∑ –º–µ–Ω—é
      case 'become_partner':
        require('./becomePartner')(ctx);
        break;

      case 'spin_wheel':
        ctx.reply('–§—É–Ω–∫—Ü–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        break;

      case 'marketplace':
        require('./marketplace')(ctx);
        break;

      case 'games':
        require('./games')(ctx);
        break;

      case 'events':
        require('./events')(ctx);
        break;

      case 'admin_panel':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./adminPanel')(ctx);
        } else {
          ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      case 'manage_welcome_videos':
        require('./manageWelcomeVideos')(ctx);
        break;

      case 'manage_wheel':
        require('./manageWheel')(ctx);
        break;

      case 'manage_products':
        require('./manageProducts')(ctx);
        break;

      case 'manage_games':
        require('./manageGames')(ctx);
        break;

      case 'create_event':
        require('./createEvent')(ctx);
        break;

      case 'broadcast':
        require('./broadcast')(ctx);
        break;

      case 'manage_activities':
        require('./manageActivities')(ctx);
        break;

      case 'view_statistics':
        require('./viewStatistics')(ctx);
        break;

      case data.match(/^upload_video_\d+/)?.[0]:
        const qualificationId = data.split('_')[2];
        ctx.scene.enter('upload_video_scene', { qualificationId });
        break;

      default:
        ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await ctx.answerCbQuery();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

async function handleQualification(ctx, qualificationNumber) {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: user.id },
        data: { qualification: `qualification_${qualificationNumber}` }
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const welcomeVideo = await prisma.welcomeVideo.findFirst({
        where: { qualification: `qualification_${qualificationNumber}` }
      });

      if (welcomeVideo) {
        await ctx.replyWithVideo(welcomeVideo.fileId, {
          caption: '–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ö—É—Ä–∞–∂–∏–∫–∏, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!'
        });
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É—Ä–∞–∂–∏–∫–∏
      await prisma.user.update({
        where: { id: user.id },
        data: { balance: { increment: 1000 } }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      require('./menu')(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
