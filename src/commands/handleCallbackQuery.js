const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é getMenuKeyboard
function getMenuKeyboard(userRole) {
  let keyboard = [
    [{ text: 'ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º', callback_data: 'become_partner' }],
    [{ text: 'üé° –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data: 'spin_wheel' }],
    [{ text: 'üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }],
    [{ text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'games' }],
    [{ text: 'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'events' }],
    [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data: 'earn' }],
    [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral_program' }],
    [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (userRole === 'admin' || userRole === 'superadmin') {
    keyboard.push([{ text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  if (userRole === 'partner') {
    keyboard.push([{ text: 'üéÆ –ú–æ–∏ –∏–≥—Ä—ã', callback_data: 'my_games' }]);
  }

  return keyboard;
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleQualification
async function handleQualification(ctx, qualificationNumber) {
  try {
    const userId = ctx.from.id;
    let user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) }
    });

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!user) {
      user = await prisma.user.create({
        data: {
          telegramId: BigInt(userId),
          role: 'user',
          balance: 0,
          qualification: `qualification_${qualificationNumber}`
        }
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await prisma.user.update({
        where: { id: user.id },
        data: { qualification: `qualification_${qualificationNumber}` }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const welcomeVideo = await prisma.welcomeVideo.findFirst({
      where: { qualification: `qualification_${qualificationNumber}` }
    });

    if (welcomeVideo) {
      await ctx.replyWithVideo(welcomeVideo.fileId, {
        caption: '–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ö—É—Ä–∞–∂–∏–∫–∏, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!'
      });
    }

    // End of Selection

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 1000 –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n` +
      `–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é:`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'open_menu' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
module.exports = async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const userRole = ctx.state.userRole;

    switch (true) {
      case data === 'start_bot':
        await ctx.reply('–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ –≤—ã', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üë®‚Äçüíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç', callback_data: 'qualification_1' }],
              [{ text: 'üéÆ –ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫, –ø—Ä–æ–≤–æ–∂—É –∏–≥—Ä—ã', callback_data: 'qualification_2' }],
              [{ text: 'üé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π', callback_data: 'qualification_3' }],
              [{ text: 'üë®‚Äçüè´ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä', callback_data: 'qualification_4' }],
              [{ text: 'üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ HR', callback_data: 'qualification_5' }],
              [{ text: 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –≤–∞—à–∞ –¥–≤–∏–∂—É—Ö–∞', callback_data: 'qualification_6' }],
              [{ text: 'üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', callback_data: 'qualification_7' }],
              [{ text: 'üé≤ –ê–≤—Ç–æ—Ä –∏–≥—Ä', callback_data: 'qualification_8' }],
              [{ text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥', callback_data: 'qualification_9' }],
              [{ text: 'üé® –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', callback_data: 'qualification_10' }],
              [{ text: 'üîÑ –°–µ—Ç–µ–≤–æ–π MLM-–±–∏–∑–Ω–µ—Å', callback_data: 'qualification_11' }],
              [{ text: 'üíÖ –ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞', callback_data: 'qualification_12' }]
            ]
          }
        });
        break;

      case /^qualification_\d+$/.test(data):
        const qualificationNum = data.split('_')[1];
        await handleQualification(ctx, qualificationNum);
        break;

      case data === 'open_menu':
        try {
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          const message = 
            `*üé™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—É–¥–∏—é –∏–≥—Ä –ö—É—Ä–∞–∂ –ü—Ä–æ–¥–∞–∂!*\n\n` +
            `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.balance || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n` +
            `*–û –Ω–∞—à–µ–º –±–æ—Ç–µ:*\n` +
            `‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –∏–≥—Ä–∞—Ö –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–¥–∞–∂\n` +
            `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã\n` +
            `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –æ–±—É—á–∞—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n` +
            `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n` +
            `‚Ä¢ –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã\n` +
            `‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ\n\n` +
            `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
            `üéÆ –ò–≥—Ä—ã - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n` +
            `üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏\n` +
            `üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã - –∏—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É\n` +
            `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å - –ø–æ–ª—É—á–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n` +
            `üõçÔ∏è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å - –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã\n` +
            `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏\n` +
            `ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º - –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`;

          const keyboard = getMenuKeyboard(userRole);

          if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'check_balance':
        require('./balance')(ctx);
        break;

      case data === 'how_to_earn':
        require('./earn')(ctx);
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∏–∑ –º–µ–Ω—é
      case data === 'become_partner':
        require('./becomePartner')(ctx);
        break;

      case data === 'spin_wheel':
        require('./spinWheel')(ctx);
        break;

      case data === 'marketplace':
        try {
          const products = await prisma.product.findMany({
            where: {
              stock: {
                gt: 0
              }
            }
          });

          let message = '*–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å*\n\n';
          
          if (products.length > 0) {
            message += '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
            products.forEach(product => {
              message += `üì¶ ${product.name} - ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            });
            message += '\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥"';

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await ctx.deleteMessage();
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìë –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'show_catalog' }],
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          } else {
            await ctx.deleteMessage();
            await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
      case data === 'show_catalog':
        try {
          const products = await prisma.product.findMany({
            where: {
              stock: {
                gt: 0
              }
            }
          });

          if (products.length === 0) {
            return ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
          for (const product of products) {
            let message = `üì¶ *${product.name}*\n\n`;
            if (product.description) {
              message += `üìù ${product.description}\n\n`;
            }
            message += `üí∞ –¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

            const keyboard = {
              inline_keyboard: [
                [
                  { text: 'üí≥ –ö—É–ø–∏—Ç—å –∑–∞ —Ä—É–±–ª–∏', callback_data: `buy_product_money_${product.id}` },
                  { text: 'üíé –ö—É–ø–∏—Ç—å –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: `buy_product_kurajiki_${product.id}` }
                ]
              ]
            };

            if (product.imageId) {
              await ctx.replyWithPhoto(product.imageId, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            } else {
              await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
          }

          // –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
              ]
            }
          });

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'games':
        try {
          const games = await prisma.game.findMany({
            where: {
              date: {
                gte: new Date()
              }
            },
            orderBy: {
              date: 'asc'
            }
          });

          const message = games.length === 0 
            ? '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä'
            : '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:';

          const keyboard = games.map(game => ([{
            text: `${game.title} - ${new Date(game.date).toLocaleDateString()}`,
            callback_data: `view_game_${game.id}`
          }]));

          keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'events':
        try {
          const events = await prisma.event.findMany({
            where: {
              date: {
                gte: new Date()
              }
            },
            orderBy: {
              date: 'asc'
            },
            include: {
              participants: true
            }
          });

          let message = events.length === 0 
            ? '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'
            : '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n\n';

          const keyboard = [];

          if (events.length > 0) {
            for (const event of events) {
              message += `üé™ ${event.title}\n`;
              message += `üìÖ ${new Date(event.date).toLocaleDateString()}\n`;
              message += `‚è∞ ${new Date(event.date).toLocaleTimeString()}\n`;
              message += `üìç ${event.location}\n`;
              message += `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${event.seats - event.participants.length}\n`;
              message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.priceRub > 0 ? `${event.priceRub}‚ÇΩ / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}\n\n`;

              keyboard.push([{ 
                text: `‚úçÔ∏è ${event.title} - ${new Date(event.date).toLocaleDateString()}`, 
                callback_data: `view_event_${event.id}` 
              }]);
            }
          }

          keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'admin_panel':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./adminPanel')(ctx);
        } else {
          ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      case data === 'manage_welcome_videos':
        require('./manageWelcomeVideos')(ctx);
        break;

      case data === 'manage_wheel':
        require('./manageWheel')(ctx);
        break;

      case data === 'manage_products':
        try {
          if (userRole !== 'admin' && userRole !== 'superadmin') {
            return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏');
          }

          const products = await prisma.product.findMany();
          let message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n';

          if (products.length > 0) {
            message += '–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
            products.forEach(product => {
              message += `üì¶ ${product.name}\n`;
              message += `üí∞ ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
              message += `üìä –ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n`;
            });
          } else {
            message += '–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n';
          }

          const keyboard = [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'add_product' }],
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'list_products' }],
            [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'edit_products' }],
            [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'delete_product' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
          ];

          if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'add_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
        }
        break;

      case data === 'edit_products':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('edit_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
        }
        break;

      case data === 'delete_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const productsToDelete = await prisma.product.findMany();
          const keyboardDelete = productsToDelete.map(product => ([{
            text: product.name,
            callback_data: `confirm_delete_product_${product.id}`
          }]));
          keyboardDelete.push([{ text: 'üîô –û—Ç–º–µ–Ω–∞', callback_data: 'manage_products' }]);
          
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: { inline_keyboard: keyboardDelete }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
        }
        break;

      case /^confirm_delete_product_\d+$/.test(data):
        try {
          if (userRole !== 'admin' && userRole !== 'superadmin') {
            return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–æ–≤');
          }

          const productId = parseInt(data.split('_')[3]);
          await prisma.product.delete({
            where: { id: productId }
          });
          await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'list_products':
        try {
          const listedProducts = await prisma.product.findMany();
          let listMessage = '*üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n';
          
          if (listedProducts.length > 0) {
            listedProducts.forEach(product => {
              listMessage += `üì¶ *${product.name}*\n`;
              listMessage += `üìù ${product.description}\n`;
              listMessage += `üí∞ –¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
              listMessage += `üìä –ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n`;
            });
          } else {
            listMessage += '–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
          }
          
          await ctx.reply(listMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_products' }]]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏
      case /^buy_product_kurajiki_\d+$/.test(data):
        const buyProductId = parseInt(data.split('_')[3]);
        await require('./buyProductWithKurajiki')(ctx, buyProductId);
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞
      case /^product_given_\d+_\d+$/.test(data):
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è userId –∏ productId
          const matches = data.match(/^product_given_(\d+)_(\d+)$/);
          if (!matches) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data');
          }

          const [, buyerUserId, productId] = matches;
          const adminUsername = ctx.from.username || ctx.from.first_name;

          // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const originalMessage = ctx.callbackQuery.message.text;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
          await ctx.editMessageText(
            `${originalMessage}\n\n‚úÖ –¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @${adminUsername}`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: []  // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              }
            }
          );

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
          const buyer = await prisma.user.findUnique({
            where: { telegramId: BigInt(buyerUserId) }
          });

          if (buyer) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            try {
              await ctx.telegram.sendMessage(
                Number(buyer.telegramId),
                '‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à —Ç–æ–≤–∞—Ä –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'
              );
            } catch (sendError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:', sendError);
              await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –Ω–æ —Ç–æ–≤–∞—Ä –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π.');
            }
          }

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'manage_games':
        require('./manageGames')(ctx);
        break;

      case data === 'create_event':
        require('./createEvent')(ctx);
        break;

      case data === 'broadcast':
        require('./broadcast')(ctx);
        break;

      case data === 'manage_activities':
        require('./manageActivities')(ctx);
        break;

      case data === 'view_statistics':
        require('./viewStatistics')(ctx);
        break;

      case /^upload_video_\d+$/.test(data):
        const qualificationId = data.split('_')[2];
        ctx.scene.enter('upload_video_scene', { qualificationId });
        break;

      case data === 'add_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_wheel_prize_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data === 'list_wheel_prizes':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizes = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          let prizeMessage = '*–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã:*\n\n';
          let totalProbability = 0;
          
          prizes.forEach(prize => {
            prizeMessage += `üéÅ ${prize.name}\n`;
            prizeMessage += `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${prize.probability}%\n\n`;
            totalProbability += prize.probability;
          });
          
          prizeMessage += `\n–û–±—â–∞—è —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: ${totalProbability}%`;
          
          await ctx.editMessageText(prizeMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
              ]
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data === 'delete_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizesToDelete = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          if (prizesToDelete.length === 0) {
            return ctx.editMessageText('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
                ]
              }
            });
          }

          const keyboardDeletePrize = prizesToDelete.map(prize => [{
            text: `${prize.name} (${prize.probability}%)`,
            callback_data: `delete_prize_${prize.id}`
          }]);

          keyboardDeletePrize.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: {
              inline_keyboard: keyboardDeletePrize
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case /^delete_prize_\d+$/.test(data):
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizeId = parseInt(data.split('_')[2]);
          try {
            await prisma.wheelPrize.update({
              where: { id: prizeId },
              data: { active: false }
            });
            
            await ctx.editMessageText('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–µ—Å–æ–º', callback_data: 'manage_wheel' }]
                ]
              }
            });
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞');
          }
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case /^prize_given_\d+$/.test(data):
        if (userRole === 'admin' || userRole === 'superadmin') {
          const winnerTelegramId = data.split('_')[2];
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ –ø—Ä–∏–∑–∞
          await ctx.editMessageText(
            ctx.update.callback_query.message.text + 
            `\n\n‚úÖ –ü—Ä–∏–∑ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
          await ctx.telegram.sendMessage(
            winnerTelegramId,
            'üéÅ –í–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
          );
        }
        break;

      case data === 'earn':
        require('./earn')(ctx);
        break;

      case /^post_(vk|instagram|telegram|ok)$/.test(data):
        try {
          const network = data.split('_')[1];
            
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          const reward = await prisma.socialMediaReward.findUnique({
            where: { platform: network }
          });

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          const rewardAmount = reward?.amount || {
            vk: 300,
            instagram: 300,
            telegram: 200,
            ok: 200
          }[network];

          // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Å–µ—Ç–∏ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          await ctx.scene.enter('post_verification_scene', { 
            network,
            rewardAmount
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^approve_post_\d+_[a-z]+$/.test(data):
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
          const match = data.match(/^approve_post_(\d+)_([a-z]+)$/);
          if (!match) {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', data);
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            return;
          }

          const [, userId, network] = match;
          console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π userId:', userId, '–¢–∏–ø:', typeof userId);
          console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π network:', network);
          
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          if (!originalMessage) {
            return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
          }

          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          const reward = await prisma.socialMediaReward.findUnique({
            where: { platform }
          });

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          const rewardAmount = reward?.amount || {
            vk: 300,
            instagram: 300,
            telegram: 200,
            ok: 200
          }[network];

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚úÖ –ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: []
              }
            }
          );

          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º userId –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ—á–∏—Å–ª–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            const cleanUserId = userId.toString().replace(/\D/g, '');
            console.log('–û—á–∏—â–µ–Ω–Ω—ã–π userId:', cleanUserId);
            
            if (!cleanUserId) {
              throw new Error('Invalid userId format');
            }

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ BigInt —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            const telegramId = BigInt(cleanUserId);
            console.log('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π telegramId:', telegramId.toString());

            let user = await prisma.user.findUnique({
              where: { telegramId }
            });

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if (!user) {
              console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId:', telegramId.toString());
              user = await prisma.user.create({
                data: {
                  telegramId,
                  role: 'user',
                  balance: 0
                }
              });
              console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await prisma.user.update({
              where: { id: user.id },
              data: { balance: { increment: rewardAmount } }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—É—Ä–∞–∂–∏–∫–æ–≤
            await ctx.telegram.sendMessage(
              Number(cleanUserId),
              `‚úÖ –í–∞—à –ø–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n` +
              `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${rewardAmount} –∫—É—Ä–∞–∂–∏–∫–æ–≤.\n` +
              `–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'earn' }]
                  ]
                }
              }
            );
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ userId:', error);
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
              originalUserId: userId,
              type: typeof userId,
              networkType: network,
              callbackData: data
            });
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case /^reject_post_\d+_\w+$/.test(data):
        try {
          const [, userId, network] = data.split('_');
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
              }
            }
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
          await ctx.telegram.sendMessage(
            userId,
            '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `post_${network}` }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case data === 'list_games':
        try {
          const gamesList = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          let listMessage = '*–°–ø–∏—Å–æ–∫ –∏–≥—Ä*\n\n';
          
          if (gamesList.length > 0) {
            gamesList.forEach(game => {
              listMessage += `üéÆ ${game.title}\n`;
              listMessage += `üìÖ ${new Date(game.date).toLocaleDateString()}\n`;
              listMessage += `‚è∞ ${new Date(game.date).toLocaleTimeString()}\n`;
              listMessage += `üìç ${game.location}\n`;
              listMessage += `üí∞ ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
              listMessage += `üë• –ú–µ—Å—Ç: ${game.seats}\n\n`;
            });
          } else {
            listMessage += '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n';
          }

          const keyboardListGames = [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', callback_data: 'add_game' }],
            [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', callback_data: 'edit_game' }],
            [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', callback_data: 'delete_game' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
          ];

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(listMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboardListGames
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'edit_game':
        try {
          const gamesToEdit = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          if (gamesToEdit.length === 0) {
            await ctx.deleteMessage();
            return ctx.reply('–ù–µ—Ç –∏–≥—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          let editMessage = '*–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n';
          
          const keyboardEditGames = gamesToEdit.map(game => ([{
            text: `${game.title} - ${new Date(game.date).toLocaleDateString()}`,
            callback_data: `edit_game_${game.id}`
          }]));

          keyboardEditGames.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
          await ctx.reply(editMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboardEditGames
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      case /^edit_game_(title|date|location|price|seats|description|image)_\d+$/.test(data):
        try {
          const [, param, gameId] = data.split('_');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          ctx.session = {
            ...ctx.session,
            editingGame: {
              id: parseInt(gameId),
              param: param
            }
          };
          
          let promptMessage;
          switch (param) {
            case 'title':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:';
              break;
            case 'date':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:';
              break;
            case 'location':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:';
              break;
            case 'price':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1000 2000"):';
              break;
            case 'seats':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:';
              break;
            case 'description':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:';
              break;
            case 'image':
              promptMessage = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã:';
              break;
          }

          await ctx.scene.enter('edit_game_scene', { promptMessage });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'delete_game':
        try {
          const gamesToDelete = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          if (gamesToDelete.length === 0) {
            await ctx.deleteMessage();
            return ctx.reply('–ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          let deleteMessage = '*–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n';
          gamesToDelete.forEach(game => {
            deleteMessage += `üéÆ ${game.title}\n`;
            deleteMessage += `üìÖ ${new Date(game.date).toLocaleDateString()}\n`;
            deleteMessage += `‚è∞ ${new Date(game.date).toLocaleTimeString()}\n`;
            deleteMessage += `üìç ${game.location}\n\n`;
          });

          const keyboardDeleteGame = gamesToDelete.map(game => ([{
            text: `${game.title} - ${new Date(game.date).toLocaleDateString()}`,
            callback_data: `confirm_delete_game_${game.id}`
          }]));

          keyboardDeleteGame.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
          await ctx.reply(deleteMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboardDeleteGame
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^confirm_delete_game_\d+$/.test(data):
        try {
          const gameIdToDelete = parseInt(data.split('_')[3]);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É
          const game = await prisma.game.findUnique({
            where: { id: gameIdToDelete }
          });

          if (!game) {
            return ctx.editMessageText('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'delete_game' }]
                ]
              }
            });
          }

          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
          await ctx.editMessageText(
            `‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É "${game.title}"?\n` +
            `–î–∞—Ç–∞: ${new Date(game.date).toLocaleDateString()}\n` +
            `–í—Ä–µ–º—è: ${new Date(game.date).toLocaleTimeString()}\n` +
            `–ú–µ—Å—Ç–æ: ${game.location}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `delete_game_confirmed_${game.id}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'delete_game' }
                  ]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^delete_game_confirmed_\d+$/.test(data):
        try {
          const confirmedGameId = parseInt(data.split('_')[3]);
          
          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
          await prisma.game.delete({
            where: { id: confirmedGameId }
          });

          await ctx.editMessageText('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º', callback_data: 'manage_games' }]
              ]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'add_game':
        try {
          if (userRole !== 'admin' && userRole !== 'superadmin') {
            return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å—Ü–µ–Ω—É
          await ctx.deleteMessage();
          
          // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
          await ctx.scene.enter('add_game_scene');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'manage_events':
        require('./manageEvents')(ctx);
        break;

      case data === 'add_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_event_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case data === 'edit_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./editEvent')(ctx);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case data === 'delete_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./deleteEvent')(ctx);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case /^confirm_delete_event_\d+$/.test(data):
        try {
          const eventIdToDelete = parseInt(data.split('_')[3]);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
          const eventToDelete = await prisma.event.findUnique({
            where: { id: eventIdToDelete },
            include: { 
              participants: {
                select: {
                  id: true,
                  telegramId: true,
                  balance: true
                }
              }
            }
          });

          if (!eventToDelete) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

          // –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          await prisma.event.delete({
            where: { id: eventIdToDelete }
          });

          await ctx.reply('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏', callback_data: 'manage_events' }]
              ]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^edit_event_(title|date|location|price|seats|description)_\d+$/.test(data):
        try {
          const [, paramEvent, eventId] = data.split('_');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          ctx.session = {
            ...ctx.session,
            editingEvent: {
              id: parseInt(eventId),
              param: paramEvent
            }
          };
          
          let promptEventMessage;
          switch (paramEvent) {
            case 'title':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:';
              break;
            case 'date':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:';
              break;
            case 'location':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:';
              break;
            case 'price':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" –∏–ª–∏ "0 0":';
              break;
            case 'seats':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:';
              break;
            case 'description':
              promptEventMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:';
              break;
          }

          await ctx.scene.enter('edit_event_scene', { promptMessage: promptEventMessage });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^register_event_\d+$/.test(data):
        try {
          const eventIdRegister = parseInt(data.split('_')[2]);
          const eventRegister = await prisma.event.findUnique({
            where: { id: eventIdRegister },
            include: { participants: true }
          });

          if (!eventRegister) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          if (eventRegister.seats <= eventRegister.participants.length) {
            return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã');
          }

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userRegister = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!userRegister) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const isAlreadyRegistered = eventRegister.participants.some(p => p.id === userRegister.id);
          if (isAlreadyRegistered) {
            return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
          }

          if (eventRegister.priceRub > 0) {
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
            await ctx.reply(
              `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: ${eventRegister.priceRub}‚ÇΩ –∏–ª–∏ ${eventRegister.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
              '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏', callback_data: `pay_event_money_${eventRegister.id}` },
                      { text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: `pay_event_kurajiki_${eventRegister.id}` }
                    ]
                  ]
                }
              }
            );
          } else {
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ, —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            await prisma.event.update({
              where: { id: eventRegister.id },
              data: {
                participants: {
                  connect: { id: userRegister.id }
                }
              }
            });

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await ctx.reply(
              '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
              {
                reply_markup: {
                  keyboard: [
                    [{
                      text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
                      request_contact: true
                    }]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await ctx.telegram.sendMessage(
              process.env.ADMIN_CHAT_ID,
              `–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
              `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${eventRegister.title}\n` +
              `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
              `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^pay_event_(money|kurajiki)_\d+$/.test(data):
        try {
          const matchesPayment = data.match(/^pay_event_(money|kurajiki)_(\d+)$/);
          if (!matchesPayment) return;

          const paymentType = matchesPayment[1];
          const eventIdPayment = parseInt(matchesPayment[2]);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID
          if (isNaN(eventIdPayment)) {
            console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventIdPayment);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
            return;
          }

          // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          const eventPayment = await prisma.event.findUnique({
            where: { 
              id: eventIdPayment 
            },
            include: { 
              creator: true,
              participants: true
            }
          });

          if (!eventPayment) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userPayment = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!userPayment) {
            await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }

          if (paymentType === 'kurajiki') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if (userPayment.balance < eventPayment.priceKur) {
              await ctx.reply(
                '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n' +
                `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${eventPayment.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
                `–í–∞—à –±–∞–ª–∞–Ω—Å: ${userPayment.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
                {
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: 'earn' }],
                      [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é', callback_data: `view_event_${eventPayment.id}` }]
                    ]
                  }
                }
              );
              return;
            }

            try {
              // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
              await prisma.$transaction([
                prisma.user.update({
                  where: { id: userPayment.id },
                  data: { balance: { decrement: eventPayment.priceKur } }
                }),
                prisma.event.update({
                  where: { id: eventPayment.id },
                  data: {
                    participants: {
                      connect: { id: userPayment.id }
                    }
                  }
                })
              ]);

              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              await ctx.reply(
                '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                {
                  reply_markup: {
                    keyboard: [
                      [{
                        text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
                        request_contact: true
                      }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                  }
                }
              );

              // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
              await ctx.telegram.sendMessage(
                process.env.ADMIN_CHAT_ID,
                `üíé –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏!\n\n` +
                `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${eventPayment.title}\n` +
                `–°—É–º–º–∞: ${eventPayment.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
                `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
                `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                `ID: ${ctx.from.id}`
              );

            } catch (transactionError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
              await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
          } else {
            // –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Robokassa
            const isTestMode = process.env.ROBOKASSA_TEST_MODE === 'true';
            const paymentUrl = generatePaymentUrl(
              eventPayment.priceRub,
              `–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: ${eventPayment.title}`,
              isTestMode
            );

            await ctx.reply(
              `–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "${eventPayment.title}" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
              `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${eventPayment.priceRub}‚ÇΩ`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }],
                    [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é', callback_data: `view_event_${eventPayment.id}` }]
                  ]
                }
              }
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^view_event_\d+$/.test(data):
        try {
          const eventIdView = parseInt(data.split('_')[2]);
          const eventView = await prisma.event.findUnique({
            where: { id: eventIdView },
            include: { participants: true }
          });

          if (!eventView) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const userView = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          const isRegisteredView = eventView.participants.some(p => p.id === userView?.id);

          const eventMessage = {
            text: `üé™ ${eventView.title}\n\n` +
                  `üìù ${eventView.description || ''}\n` +
                  `üìÖ ${new Date(eventView.date).toLocaleDateString()}\n` +
                  `‚è∞ ${new Date(eventView.date).toLocaleTimeString()}\n` +
                  `üìç ${eventView.location}\n` +
                  `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${eventView.seats - eventView.participants.length}\n\n` +
                  `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${eventView.priceRub > 0 ? `${eventView.priceRub}‚ÇΩ / ${eventView.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`,
            reply_markup: {
              inline_keyboard: [
                [ 
                  { 
                    text: isRegisteredView ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å' : '‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 
                    callback_data: isRegisteredView ? `cancel_event_registration_${eventView.id}` : `register_event_${eventView.id}` 
                  } 
                ],
                [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'events' }]
              ]
            }
          };

          if (eventView.imageId) {
            await ctx.replyWithPhoto(eventView.imageId, eventMessage);
          } else {
            await ctx.reply(eventMessage.text, eventMessage);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π case –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      case /^cancel_event_registration_\d+$/.test(data):
        try {
          const eventIdCancel = parseInt(data.split('_')[3]);
          const userCancel = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!userCancel) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          const eventCancel = await prisma.event.findUnique({
            where: { id: eventIdCancel },
            include: { participants: true }
          });

          if (!eventCancel) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏
          if (eventCancel.priceKur > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await prisma.user.update({
              where: { id: userCancel.id },
              data: { balance: { increment: eventCancel.priceKur } }
            });
          }

          // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          await prisma.event.update({
            where: { id: eventCancel.id },
            data: {
              participants: {
                disconnect: { id: userCancel.id }
              }
            }
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          await ctx.telegram.sendMessage(
            process.env.ADMIN_CHAT_ID,
            `‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${eventCancel.title}\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}\n` +
            `–¢–µ–ª–µ—Ñ–æ–Ω: ${userCancel.phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
            (eventCancel.priceKur > 0 ? `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤: ${eventCancel.priceKur}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
          );

          await ctx.reply(
            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n' +
            (eventCancel.priceKur > 0 ? `üíé ${eventCancel.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n` : '') +
            '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'events' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'view_event_registrations':
        try {
          const eventsRegistrations = await prisma.event.findMany({
            orderBy: {
              date: 'desc'
            }
          });

          if (eventsRegistrations.length === 0) {
            await ctx.editMessageText('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]
                ]
              }
            });
            return;
          }

          const keyboardViewRegs = eventsRegistrations.map(event => ([{
            text: `${event.title} - ${new Date(event.date).toLocaleDateString()}`,
            callback_data: `view_registrations_${event.id}`
          }]));

          keyboardViewRegs.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', {
            reply_markup: { inline_keyboard: keyboardViewRegs }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^view_registrations_\d+$/.test(data):
        try {
          const eventIdViewReg = parseInt(data.split('_')[2]);
          const eventViewReg = await prisma.event.findUnique({
            where: { id: eventIdViewReg },
            include: {
              participants: {
                select: {
                  id: true,
                  telegramId: true,
                  phoneNumber: true,
                  balance: true
                }
              }
            }
          });

          if (!eventViewReg) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          if (eventViewReg.participants.length === 0) {
            await ctx.editMessageText(
              `*${eventViewReg.title}*\n\n–ù–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â—ë –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                  ]
                }
              }
            );
            return;
          }

          let registrationsMessage = `*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${eventViewReg.title}*\n`;
          registrationsMessage += `üìÖ ${new Date(eventViewReg.date).toLocaleDateString()} ${new Date(eventViewReg.date).toLocaleTimeString()}\n\n`;
          registrationsMessage += `–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${eventViewReg.participants.length} –∏–∑ ${eventViewReg.seats}\n\n`;
          registrationsMessage += '*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n';

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
          for (let i = 0; i < eventViewReg.participants.length; i++) {
            const participant = eventViewReg.participants[i];
            try {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
              const telegramId = participant.telegramId.toString();
              const userInfo = await ctx.telegram.getChatMember(telegramId, telegramId);
              
              registrationsMessage += `${i + 1}. ${userInfo.user.first_name} ${userInfo.user.last_name || ''}\n`;
              registrationsMessage += `üë§ ID: ${telegramId}\n`;
              registrationsMessage += `${userInfo.user.username ? `@${userInfo.user.username}\n` : ''}`;
              registrationsMessage += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
            } catch (userError) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              registrationsMessage += `${i + 1}. –£—á–∞—Å—Ç–Ω–∏–∫\n`;
              registrationsMessage += `üë§ ID: ${participant.telegramId.toString()}\n`;
              registrationsMessage += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${participant.telegramId}:`, userError);
            }
          }

          // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
          const maxLength = 4096;
          if (registrationsMessage.length > maxLength) {
            const parts = registrationsMessage.match(new RegExp(`.{1,${maxLength}}`, 'g'));
            for (let i = 0; i < parts.length; i++) {
              if (i === parts.length - 1) {
                await ctx.reply(parts[i], {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                    ]
                  }
                });
              } else {
                await ctx.reply(parts[i], { parse_mode: 'Markdown' });
              }
            }
          } else {
            await ctx.editMessageText(registrationsMessage, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'broadcast_all':
        ctx.scene.enter('broadcast_scene', { broadcastType: 'all' });
        break;

      case data === 'broadcast_partners':
        ctx.scene.enter('broadcast_scene', { broadcastType: 'partners' });
        break;

      case data === 'broadcast_qualification':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π
        const qualificationKeyboardBroadcast = [
          [{ text: 'üë®‚Äçüíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç', callback_data: 'broadcast_qual_1' }],
          [{ text: 'üéÆ –ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫', callback_data: 'broadcast_qual_2' }],
          [{ text: 'üé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π', callback_data: 'broadcast_qual_3' }],
          [{ text: 'üë®‚Äçüè´ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä', callback_data: 'broadcast_qual_4' }],
          [{ text: 'üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ HR', callback_data: 'broadcast_qual_5' }],
          [{ text: 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –¥–≤–∏–∂—É—Ö–∞', callback_data: 'broadcast_qual_6' }],
          [{ text: 'üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', callback_data: 'broadcast_qual_7' }],
          [{ text: 'üé≤ –ê–≤—Ç–æ—Ä –∏–≥—Ä', callback_data: 'broadcast_qual_8' }],
          [{ text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥', callback_data: 'broadcast_qual_9' }],
          [{ text: 'üé® –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', callback_data: 'broadcast_qual_10' }],
          [{ text: 'üîÑ –°–µ—Ç–µ–≤–æ–π MLM-–±–∏–∑–Ω–µ—Å', callback_data: 'broadcast_qual_11' }],
          [{ text: 'üíÖ –ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞', callback_data: 'broadcast_qual_12' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'broadcast' }]
        ];

        await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          reply_markup: { inline_keyboard: qualificationKeyboardBroadcast }
        });
        break;

      case /^broadcast_qual_\d+$/.test(data):
        const broadcastQualNum = data.split('_')[2];
        ctx.scene.enter('broadcast_scene', { 
          broadcastType: 'qualification', 
          qualification: `qualification_${broadcastQualNum}` 
        });
        break;

      case data === 'broadcast_scheduled':
        const scheduledBroadcasts = await prisma.scheduledBroadcast.findMany({
          where: {
            isCompleted: false,
            scheduledFor: {
              gt: new Date()
            }
          },
          orderBy: {
            scheduledFor: 'asc'
          }
        });

        let scheduledMessage = '*üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n';
        
        if (scheduledBroadcasts.length === 0) {
          scheduledMessage += '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫';
        } else {
          scheduledBroadcasts.forEach((broadcast, index) => {
            scheduledMessage += `${index + 1}. ${new Date(broadcast.scheduledFor).toLocaleString('ru-RU')}\n`;
            scheduledMessage += `–¢–∏–ø: ${broadcast.type}\n`;
            if (broadcast.qualification) {
              scheduledMessage += `–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: ${broadcast.qualification}\n`;
            }
            scheduledMessage += '\n';
          });
        }

        const keyboardScheduled = [
          ...scheduledBroadcasts.map(broadcast => ([{
            text: `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å (${new Date(broadcast.scheduledFor).toLocaleDateString()})`,
            callback_data: `cancel_broadcast_${broadcast.id}`
          }])),
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'broadcast' }]
        ];

        await ctx.editMessageText(scheduledMessage, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboardScheduled }
        });
        break;

      case /^cancel_broadcast_\d+$/.test(data):
        const broadcastId = parseInt(data.split('_')[2]);
        await prisma.scheduledBroadcast.delete({
          where: { id: broadcastId }
        });
        
        await ctx.reply('‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await ctx.answerCbQuery();
        break;

      case data === 'help':
        try {
          const helpMessage = 
            '*‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞*\n\n' +
            '–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n' +
            'üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @Sazonovbt\n' +
            'üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏: kuraj-prodaj.com\n\n' +
            '–ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º! üòä';

          const keyboardHelp = [
            [{ text: 'üì± –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É', url: 'https://t.me/Sazonovbt' }],
            [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
          ];

          await ctx.editMessageText(helpMessage, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboardHelp },
            disable_web_page_preview: true
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^set_reward_(telegram|instagram|vk|ok)$/.test(data):
        try {
          const platform = data.split('_')[2];
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
          ctx.session = {
            ...ctx.session,
            settingRewardFor: platform
          };

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          const currentReward = await prisma.socialMediaReward.findUnique({
            where: { platform }
          });

          const setRewardMessage = 
            `*–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –¥–ª—è ${platform}*\n\n` +
            `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentReward?.amount || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n` +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö:';

          // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
          await ctx.scene.enter('set_reward_scene', { message: setRewardMessage });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'referral_program':
        try {
          const userIdReferral = ctx.from.id;
          const userReferral = await prisma.user.findUnique({
            where: { telegramId: BigInt(userIdReferral) }
          });

          if (!userReferral) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
          const referrals = await prisma.referral.findMany({
            where: { referrerId: userReferral.id },
            include: {
              user: true
            }
          });

          // –°—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
          const firstLevelIds = referrals.map(ref => ref.userId);
          const secondLevel = await prisma.referral.count({
            where: {
              referrerId: {
                in: firstLevelIds
              }
            }
          });

          const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
          const referralLink = `https://t.me/${botUsername}?start=${userIdReferral}`;

          let referralMessage = 'üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n';
          referralMessage += 'üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n';
          referralMessage += '- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n';
          referralMessage += '- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n';
          referralMessage += 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
          referralMessage += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è: ${referrals.length}\n`;
          referralMessage += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${secondLevel}\n\n`;
          referralMessage += 'üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n';
          referralMessage += `\`${referralLink}\`\n\n`;
          referralMessage += '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!';

          const keyboardReferral = {
            inline_keyboard: [
              [{ text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
              [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data: 'referral_stats' }],
              [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
            ]
          };

          if (ctx.callbackQuery) {
            await ctx.editMessageText(referralMessage, {
              parse_mode: 'Markdown',
              reply_markup: keyboardReferral
            });
          } else {
            await ctx.reply(referralMessage, {
              parse_mode: 'Markdown',
              reply_markup: keyboardReferral
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'copy_referral_link':
        try {
          const userIdCopy = ctx.from.id;
          const botUsernameCopy = process.env.BOT_USERNAME || 'studiokp_bot';
          const referralLinkCopy = `https://t.me/${botUsernameCopy}?start=${userIdCopy}`;
          
          await ctx.answerCbQuery('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
          await ctx.reply(
            'üîó –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n' +
            `\`${referralLinkCopy}\`\n\n` +
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ!',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral_program' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'referral_stats':
        try {
          const userIdStats = ctx.from.id;
          const userStats = await prisma.user.findUnique({
            where: { telegramId: BigInt(userIdStats) },
            include: {
              referrals: {
                include: {
                  user: {
                    select: {
                      telegramId: true,
                      balance: true,
                      createdAt: true
                    }
                  }
                }
              }
            }
          });

          if (!userStats) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          let statsMessage = 'üéâ *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤*\n\n';
          
          if (userStats.referrals.length > 0) {
            statsMessage += '*–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:*\n';
            for (const ref of userStats.referrals) {
              const earnings = ref.user.balance * (userStats.role === 'partner' ? 0.1 : 0.05);
              statsMessage += `- ID: ${ref.user.telegramId}\n`;
              statsMessage += `  –î–∞—Ç–∞: ${new Date(ref.createdAt).toLocaleDateString()}\n`;
              statsMessage += `  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Math.floor(earnings)} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n`;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            const firstLevelIdsStats = userStats.referrals.map(ref => ref.userId);
            const secondLevelRefsStats = await prisma.referral.findMany({
              where: {
                referrerId: {
                  in: firstLevelIdsStats
                }
              },
              include: {
                user: {
                  select: {
                    telegramId: true,
                    balance: true,
                    createdAt: true
                  }
                },
                referrer: {
                  select: {
                    telegramId: true
                  }
                }
              }
            });

            if (secondLevelRefsStats.length > 0) {
              statsMessage += '\n*–†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è:*\n';
              for (const ref of secondLevelRefsStats) {
                const earningsSecond = ref.user.balance * (userStats.role === 'partner' ? 0.05 : 0.025);
                statsMessage += `- ID: ${ref.user.telegramId}\n`;
                statsMessage += `  –ß–µ—Ä–µ–∑: ${ref.referrer.telegramId}\n`;
                statsMessage += `  –î–∞—Ç–∞: ${new Date(ref.createdAt).toLocaleDateString()}\n`;
                statsMessage += `  –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${Math.floor(earningsSecond)} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n`;
              }
            }
          } else {
            statsMessage += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!';
          }

          await ctx.editMessageText(statsMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral_program' }]
              ]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^view_game_\d+$/.test(data):
        try {
          const gameIdViewGame = parseInt(data.split('_')[2]);
          const userIdViewGame = ctx.from.id;

          const gameViewGame = await prisma.game.findUnique({
            where: { id: gameIdViewGame },
            include: {
              creator: true,
              participants: {
                select: {
                  telegramId: true,
                  phoneNumber: true,
                  role: true
                }
              }
            }
          });

          if (!gameViewGame) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          let messageViewGame = `üéÆ *${gameViewGame.title}*\n\n`;
          messageViewGame += `üìù ${gameViewGame.description || ''}\n`;
          messageViewGame += `üìÖ –î–∞—Ç–∞: ${new Date(gameViewGame.date).toLocaleDateString()}\n`;
          messageViewGame += `‚è∞ –í—Ä–µ–º—è: ${new Date(gameViewGame.date).toLocaleTimeString()}\n`;
          messageViewGame += `üìç –ú–µ—Å—Ç–æ: ${gameViewGame.location}\n`;
          messageViewGame += `üí∞ –¶–µ–Ω–∞: ${gameViewGame.priceRub}‚ÇΩ / ${gameViewGame.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
          messageViewGame += `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${gameViewGame.seats - gameViewGame.participants.length}\n\n`;

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
          if (userRole === 'admin' || userRole === 'superadmin' || ctx.from.id === Number(gameViewGame.creator.telegramId)) {
            messageViewGame += '*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n';
            if (gameViewGame.participants.length > 0) {
              gameViewGame.participants.forEach(participant => {
                messageViewGame += `- ${participant.phoneNumber || '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'} (@${participant.telegramId})\n`;
              });
            } else {
              messageViewGame += '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n';
            }
          }

          const keyboardViewGame = [];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∏–≥—Ä—É
          const isParticipantViewGame = gameViewGame.participants.some(p => Number(p.telegramId) === userIdViewGame);
          
          if (isParticipantViewGame) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            keyboardViewGame.push([
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: `cancel_game_registration_${gameViewGame.id}` }
            ]);
          } else if (gameViewGame.seats > gameViewGame.participants.length) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
            keyboardViewGame.push([
              { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Ä—É–±–ª—è–º–∏', callback_data: `pay_game_rub_${gameViewGame.id}` },
              { text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: `pay_game_kur_${gameViewGame.id}` }
            ]);
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã –∏ –∞–¥–º–∏–Ω–æ–≤
          if (userRole === 'admin' || userRole === 'superadmin' || ctx.from.id === Number(gameViewGame.creator.telegramId)) {
            keyboardViewGame.push([
              { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_game_${gameViewGame.id}` },
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É', callback_data: `cancel_game_${gameViewGame.id}` }
            ]);
          }

          keyboardViewGame.push([{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]);

          await ctx.reply(messageViewGame, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboardViewGame }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É
      case /^cancel_game_registration_\d+$/.test(data):
        try {
          const gameIdCancelGame = parseInt(data.split('_')[3]);
          const userIdCancelGame = ctx.from.id;

          const [gameCancelGame, userCancelGame] = await Promise.all([
            prisma.game.findUnique({
              where: { id: gameIdCancelGame },
              include: {
                creator: true,
                participants: true
              }
            }),
            prisma.user.findUnique({
              where: { telegramId: BigInt(userIdCancelGame) }
            })
          ]);

          if (!gameCancelGame || !userCancelGame) {
            return ctx.reply('–ò–≥—Ä–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }

          // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∏–≥—Ä—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏
          await prisma.$transaction([
            prisma.user.update({
              where: { id: userCancelGame.id },
              data: { balance: { increment: gameCancelGame.priceKur }, participatingGames: { disconnect: { id: gameCancelGame.id } } }
            }),
            // –ù–∞—á–∏—Å–ª—è–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
            prisma.user.update({
              where: { id: gameCancelGame.creatorId },
              data: { balance: { decrement: gameCancelGame.priceKur } }
            })
          ]);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await ctx.reply(
            `‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∏–≥—Ä—É "${gameCancelGame.title}"\n` +
            `${gameCancelGame.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üéÆ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            }
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã
          await ctx.telegram.sendMessage(
            Number(gameCancelGame.creator.telegramId),
            `‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–≥—Ä—É "${gameCancelGame.title}"\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
          );

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'view_event_registrations':
        try {
          const eventsBroadcast = await prisma.event.findMany({
            orderBy: {
              date: 'desc'
            }
          });

          if (eventsBroadcast.length === 0) {
            await ctx.editMessageText('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]
                ]
              }
            });
            return;
          }

          const keyboardViewBroadcast = eventsBroadcast.map(event => ([{
            text: `${event.title} - ${new Date(event.date).toLocaleDateString()}`,
            callback_data: `view_registrations_${event.id}`
          }]));

          keyboardViewBroadcast.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', {
            reply_markup: { inline_keyboard: keyboardViewBroadcast }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case /^view_registrations_\d+$/.test(data):
        try {
          const eventIdViewReg2 = parseInt(data.split('_')[2]);
          const eventViewReg2 = await prisma.event.findUnique({
            where: { id: eventIdViewReg2 },
            include: {
              participants: {
                select: {
                  id: true,
                  telegramId: true,
                  phoneNumber: true,
                  role: true
                }
              }
            }
          });

          if (!eventViewReg2) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          if (eventViewReg2.participants.length === 0) {
            await ctx.editMessageText(
              `*${eventViewReg2.title}*\n\n–ù–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â—ë –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                  ]
                }
              }
            );
            return;
          }

          let listRegsMessage = `*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${eventViewReg2.title}*\n`;
          listRegsMessage += `üìÖ ${new Date(eventViewReg2.date).toLocaleDateString()} ${new Date(eventViewReg2.date).toLocaleTimeString()}\n\n`;
          listRegsMessage += `–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${eventViewReg2.participants.length} –∏–∑ ${eventViewReg2.seats}\n\n`;
          listRegsMessage += '*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n';

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
          for (let i = 0; i < eventViewReg2.participants.length; i++) {
            const participant = eventViewReg2.participants[i];
            try {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
              const telegramId = participant.telegramId.toString();
              const userInfo = await ctx.telegram.getChatMember(telegramId, telegramId);
              
              listRegsMessage += `${i + 1}. ${userInfo.user.first_name} ${userInfo.user.last_name || ''}\n`;
              listRegsMessage += `üë§ ID: ${telegramId}\n`;
              listRegsMessage += `${userInfo.user.username ? `@${userInfo.user.username}\n` : ''}`;
              listRegsMessage += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
            } catch (userError) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              listRegsMessage += `${i + 1}. –£—á–∞—Å—Ç–Ω–∏–∫\n`;
              listRegsMessage += `üë§ ID: ${participant.telegramId.toString()}\n`;
              listRegsMessage += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${participant.telegramId}:`, userError);
            }
          }

          // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
          const maxLengthRegs = 4096;
          if (listRegsMessage.length > maxLengthRegs) {
            const parts = listRegsMessage.match(new RegExp(`.{1,${maxLengthRegs}}`, 'g'));
            for (let i = 0; i < parts.length; i++) {
              if (i === parts.length - 1) {
                await ctx.reply(parts[i], {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                    ]
                  }
                });
              } else {
                await ctx.reply(parts[i], { parse_mode: 'Markdown' });
              }
            }
          } else {
            await ctx.editMessageText(listRegsMessage, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data === 'broadcast_all':
        ctx.scene.enter('broadcast_scene', { broadcastType: 'all' });
        break;

      case data === 'broadcast_partners':
        ctx.scene.enter('broadcast_scene', { broadcastType: 'partners' });
        break;

      case data === 'broadcast_qualification':
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –æ–±—ã—á–Ω–æ —É–∂–µ –ø–æ–∫—Ä—ã—Ç–∞ –≤—ã—à–µ
        break;

      // –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –∑–¥–µ—Å—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏...

      default:
        ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await ctx.answerCbQuery();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};