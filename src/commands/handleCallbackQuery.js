const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRole = ctx.state.userRole;

    switch (data) {
      case 'start_bot':
        await ctx.reply('–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ –≤—ã', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üë®‚Äçüíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç', callback_data: 'qualification_1' }],
              [{ text: 'üéÆ –ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫, –ø—Ä–æ–≤–æ–∂—É –∏–≥—Ä—ã', callback_data: 'qualification_2' }],
              [{ text: 'üé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π', callback_data: 'qualification_3' }],
              [{ text: 'üë®‚Äçüè´ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä', callback_data: 'qualification_4' }],
              [{ text: 'üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ HR', callback_data: 'qualification_5' }],
              [{ text: 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –≤–∞—à–∞ –¥–≤–∏–∂—É—Ö–∞', callback_data: 'qualification_6' }],
              [{ text: 'üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', callback_data: 'qualification_7' }],
              [{ text: 'üé≤ –ê–≤—Ç–æ—Ä –∏–≥—Ä', callback_data: 'qualification_8' }],
              [{ text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥', callback_data: 'qualification_9' }],
              [{ text: 'üé® –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', callback_data: 'qualification_10' }],
              [{ text: 'üîÑ –°–µ—Ç–µ–≤–æ–π MLM-–±–∏–∑–Ω–µ—Å', callback_data: 'qualification_11' }],
              [{ text: 'üíÖ –ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞', callback_data: 'qualification_12' }]
            ]
          }
        });
        break;

      case data.match(/^qualification_\d+/)?.[0]:
        const qualificationNumber = data.split('_')[1];
        await handleQualification(ctx, qualificationNumber);
        break;

      case 'open_menu':
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        const menuKeyboard = await require('./menu').getMenuKeyboard(ctx.state.userRole);
        await ctx.editMessageText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
          reply_markup: {
            inline_keyboard: menuKeyboard
          }
        });
        break;

      case 'check_balance':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É balance
        require('./balance')(ctx);
        break;

      case 'how_to_earn':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É earn
        require('./earn')(ctx);
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∏–∑ –º–µ–Ω—é
      case 'become_partner':
        require('./becomePartner')(ctx);
        break;

      case 'spin_wheel':
        require('./spinWheel')(ctx);
        break;

      case 'marketplace':
        try {
          const products = await prisma.product.findMany({
            where: {
              stock: {
                gt: 0
              }
            }
          });

          let message = '*–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å*\n\n';
          
          if (products.length > 0) {
            message += '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
            products.forEach(product => {
              message += `üì¶ ${product.name} - ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            });
            message += '\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥"';

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await ctx.deleteMessage();
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìë –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'show_catalog' }],
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          } else {
            await ctx.deleteMessage();
            await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'games':
        try {
          const games = await prisma.game.findMany({
            where: {
              date: {
                gte: new Date()
              }
            },
            orderBy: {
              date: 'asc'
            }
          });

          const message = games.length === 0 
            ? '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä'
            : '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:';

          const keyboard = games.map(game => ([{
            text: `${game.title} - ${game.date.toLocaleDateString()}`,
            callback_data: `view_game_${game.id}`
          }]));

          keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'events':
        require('./events')(ctx);
        break;

      case 'admin_panel':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./adminPanel')(ctx);
        } else {
          ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      case 'manage_welcome_videos':
        require('./manageWelcomeVideos')(ctx);
        break;

      case 'manage_wheel':
        require('./manageWheel')(ctx);
        break;

      case 'manage_products':
        require('./manageProducts')(ctx);
        break;

      case 'manage_games':
        require('./manageGames')(ctx);
        break;

      case 'create_event':
        require('./createEvent')(ctx);
        break;

      case 'broadcast':
        require('./broadcast')(ctx);
        break;

      case 'manage_activities':
        require('./manageActivities')(ctx);
        break;

      case 'view_statistics':
        require('./viewStatistics')(ctx);
        break;

      case data.match(/^upload_video_\d+/)?.[0]:
        const qualificationId = data.split('_')[2];
        ctx.scene.enter('upload_video_scene', { qualificationId });
        break;

      case 'add_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_wheel_prize_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case 'list_wheel_prizes':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizes = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          let message = '*–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã:*\n\n';
          let totalProbability = 0;
          
          prizes.forEach(prize => {
            message += `üéÅ ${prize.name}\n`;
            message += `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${prize.probability}%\n\n`;
            totalProbability += prize.probability;
          });
          
          message += `\n–û–±—â–∞—è —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: ${totalProbability}%`;
          
          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
              ]
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case 'delete_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizes = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          if (prizes.length === 0) {
            return ctx.editMessageText('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
                ]
              }
            });
          }

          const keyboard = prizes.map(prize => [{
            text: `${prize.name} (${prize.probability}%)`,
            callback_data: `delete_prize_${prize.id}`
          }]);

          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data.match(/^delete_prize_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizeId = parseInt(data.split('_')[2]);
          try {
            await prisma.wheelPrize.update({
              where: { id: prizeId },
              data: { active: false }
            });
            
            await ctx.editMessageText('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–µ—Å–æ–º', callback_data: 'manage_wheel' }]
                ]
              }
            });
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞');
          }
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data.match(/^prize_given_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const winnerTelegramId = data.split('_')[2];
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ –ø—Ä–∏–∑–∞
          await ctx.editMessageText(
            ctx.update.callback_query.message.text + 
            `\n\n‚úÖ –ü—Ä–∏–∑ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–æ—Ä–æ–º ${adminUsername}`
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
          await ctx.telegram.sendMessage(
            winnerTelegramId,
            'üéÅ –í–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
          );
        }
        break;

      case 'earn':
        require('./earn')(ctx);
        break;

      case data.match(/^post_(vk|instagram|telegram|ok)$/)?.[0]:
        const network = data.split('_')[1];
        ctx.scene.enter('post_verification_scene', { network });
        break;

      case 'get_referral_link':
        require('./getReferralLink')(ctx);
        break;

      case 'add_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏');
        }
        break;

      case 'list_products':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const products = await prisma.product.findMany();
          let message = '*–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n';
          
          products.forEach(product => {
            message += `üì¶ *${product.name}*\n`;
            message += `üìù ${product.description}\n`;
            message += `üí∞ ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            message += `üìä –ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n`;
          });

          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_products' }]
              ]
            }
          });
        }
        break;

      case 'delete_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const products = await prisma.product.findMany();
          const keyboard = products.map(product => ([{
            text: product.name,
            callback_data: `confirm_delete_product_${product.id}`
          }]));
          
          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_products' }]);
          
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: { inline_keyboard: keyboard }
          });
        }
        break;

      case data.match(/^confirm_delete_product_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const productId = parseInt(data.split('_')[3]);
          await prisma.product.delete({ where: { id: productId } });
          await ctx.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
              ]
            }
          });
        }
        break;

      case 'edit_products':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('edit_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏');
        }
        break;

      case data.match(/^view_product_(\d+)/)?.[0]:
        try {
          const productId = parseInt(data.split('_')[2]);
          const product = await prisma.product.findUnique({
            where: { id: productId }
          });

          if (!product) {
            return ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞
          const discountCode = ctx.session?.discountCode;
          let discountPercent = 0;
          if (discountCode && discountCode.startsWith('WHEEL') && discountCode.includes('D')) {
            discountPercent = parseInt(discountCode.match(/D(\d+)/)[1]);
          }

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
          const originalPriceRub = product.priceRub;
          const originalPriceKur = product.priceKur;
          const discountedPriceRub = Math.round(originalPriceRub * (1 - discountPercent / 100));
          const discountedPriceKur = Math.round(originalPriceKur * (1 - discountPercent / 100));

          let message = `üì¶ *${product.name}*\n\n`;
          message += `üìù ${product.description}\n\n`;
          
          if (discountPercent > 0) {
            message += `üí∞ –¶–µ–Ω–∞: ~~${originalPriceRub}‚ÇΩ~~ *${discountedPriceRub}‚ÇΩ*\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ~~${originalPriceKur}~~ *${discountedPriceKur}*\n`;
            message += `üè∑ –°–∫–∏–¥–∫–∞: ${discountPercent}%\n`;
          } else {
            message += `üí∞ –¶–µ–Ω–∞: ${originalPriceRub}‚ÇΩ\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ${originalPriceKur}\n`;
          }
          
          message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

          const keyboard = [
            [
              { text: 'üí≥ –ö—É–ø–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏', callback_data: `buy_product_money_${productId}` },
              { text: 'üíé –ö—É–ø–∏—Ç—å –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: `buy_product_kurajiki_${productId}` }
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
          ];

          if (product.imageId) {
            await ctx.replyWithPhoto(product.imageId, {
              caption: message,
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^buy_product_(money|kurajiki)_(\d+)/)?.[0]:
        const [, productPaymentType, productId] = data.split('_');
        if (productPaymentType === 'money') {
          require('./buyProduct')(ctx);
        } else {
          require('./buyProductWithKurajiki')(ctx);
        }
        break;

      case data.match(/^product_given_(\d+)_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          try {
            const [, userId, productId] = data.split('_');
            const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞
            await ctx.editMessageText(
              ctx.update.callback_query.message.text + 
              `\n\n‚úÖ –¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                }
              }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await ctx.telegram.sendMessage(
              userId,
              '‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            if (ctx.chat.id.toString() !== process.env.ADMIN_CHAT_ID) {
              await ctx.telegram.sendMessage(
                process.env.ADMIN_CHAT_ID,
                `üì¶ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É\n` +
                `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${adminUsername}\n` +
                `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: ${userId}\n` +
                `–¢–æ–≤–∞—Ä ID: ${productId}`
              );
            }

          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:', error);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É, –∞ –Ω–µ –≤ —á–∞—Ç
            await ctx.telegram.sendMessage(
              ctx.from.id,
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
            );
          }
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏');
        }
        break;

      case 'show_catalog':
        try {
          const products = await prisma.product.findMany({
            where: { stock: { gt: 0 } }
          });

          if (products.length === 0) {
            return ctx.editMessageText('–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'marketplace' }]
                ]
              }
            });
          }

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ
          for (const product of products) {
            let message = `üì¶ *${product.name}*\n\n`;
            if (product.description) {
              message += `üìù ${product.description}\n\n`;
            }
            message += `üí∞ –¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ${product.priceKur}\n`;
            message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

            const keyboard = {
              inline_keyboard: [
                [
                  { text: 'üí≥ –ö—É–ø–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏', callback_data: `buy_product_money_${product.id}` },
                  { text: 'üíé –ö—É–ø–∏—Ç—å –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: `buy_product_kurajiki_${product.id}` }
                ]
              ]
            };

            if (product.imageId) {
              await ctx.replyWithPhoto(product.imageId, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            } else {
              await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            }
          }

          // –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
          await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
              ]
            }
          });

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.');
        }
        break;

      case 'referral_program':
        try {
          const user = await prisma.user.findUnique({
            where: { telegramId: ctx.from.id }
          });
          
          if (user) {
            const referrals = await prisma.referral.findMany({
              where: { referrerId: user.id },
              include: { user: true }
            });

            let message = 'üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n';
            
            if (referrals.length > 0) {
              message += '*–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:*\n';
              referrals.forEach((ref, index) => {
                const username = ref.user.telegramId;
                message += `${index + 1}. ID: ${username}\n`;
              });
            } else {
              message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n';
            }

            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'copy_referral_link':
        try {
          const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
          const referralLink = `https://t.me/${botUsername}?start=${ctx.from.id}`;
          
          await ctx.editMessageText(
            'üîó –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n' +
            `\`${referralLink}\`\n\n` +
            '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral_program' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^view_game_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[2]);
          const game = await prisma.game.findUnique({
            where: { id: gameId }
          });

          if (!game) {
            return ctx.editMessageText('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            });
          }

          let message = `üéÆ *${game.title}*\n\n`;
          if (game.description) {
            message += `üìù ${game.description}\n\n`;
          }
          message += `üìÖ –î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n`;
          message += `‚è∞ –í—Ä–µ–º—è: ${game.date.toLocaleTimeString()}\n`;
          message += `üìç –ú–µ—Å—Ç–æ: ${game.location}\n`;
          message += `üí∞ –¶–µ–Ω–∞: ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
          message += `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${game.seats}\n`;

          const keyboard = [
            [
              { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏', callback_data: `pay_game_money_${gameId}` },
              { text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: `pay_game_kurajiki_${gameId}` }
            ],
            [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
          ];

          if (game.imageId) {
            await ctx.replyWithPhoto(game.imageId, {
              caption: message,
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^pay_game_(money|kurajiki)_(\d+)/)?.[0]:
        try {
          const [action, paymentType, gameId] = data.split('_');
          console.log('–¢–∏–ø –æ–ø–ª–∞—Ç—ã:', paymentType);
          console.log('ID –∏–≥—Ä—ã:', gameId);

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
          const game = await prisma.game.findUnique({
            where: { 
              id: parseInt(gameId) 
            },
            include: {
              creator: true
            }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É (–∞–¥–º–∏–Ω –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä)
          const isAdminGame = game.creator.role === 'admin' || game.creator.role === 'superadmin';

          if (paymentType === 'money') {
            if (isAdminGame) {
              // –î–ª—è –∏–≥—Ä –æ—Ç –∞–¥–º–∏–Ω–∞ - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Robokassa
              await require('./payGame')(ctx, gameId);
            } else {
              // –î–ª—è –∏–≥—Ä –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              const paymentMessage = 
                `üí≥ –û–ø–ª–∞—Ç–∞ –∏–≥—Ä—ã "${game.title}"\n\n` +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${game.priceRub}‚ÇΩ\n\n` +
                `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${game.paymentType === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : '–¢–µ–ª–µ—Ñ–æ–Ω'}\n` +
                `–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${game.paymentDetails}\n\n` +
                `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: @${game.creator.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

              await ctx.reply(paymentMessage, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)', callback_data: `confirm_game_payment_${gameId}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_game_${gameId}` }]
                  ]
                }
              });
            }
          } else if (paymentType === 'kurajiki') {
            // –û–ø–ª–∞—Ç–∞ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
            await require('./payGameWithKurajiki')(ctx, gameId);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^confirm_game_payment_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[3]);
          const game = await prisma.game.findUnique({
            where: { id: gameId },
            include: { creator: true }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–π –æ–ø–ª–∞—Ç–µ
          const paymentMessage = 
            `üí∞ –ù–æ–≤–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –∏–≥—Ä—É!\n\n` +
            `–ò–≥—Ä–∞: ${game.title}\n` +
            `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
            `–°—É–º–º–∞: ${game.priceRub}‚ÇΩ\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}`;

          await ctx.telegram.sendMessage(game.creator.telegramId, paymentMessage, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `approve_game_payment_${ctx.from.id}_${gameId}` }],
                [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `reject_game_payment_${ctx.from.id}_${gameId}` }]
              ]
            }
          });

          await ctx.reply(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^game_contact_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[2]);
          const game = await prisma.game.findUnique({
            where: { id: gameId },
            include: {
              creator: true
            }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
          const contactMessage = 
            `üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–≥—Ä—É!\n\n` +
            `–ò–≥—Ä–∞: ${game.title}\n` +
            `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}`;

          await ctx.telegram.sendMessage(game.creator.telegramId, contactMessage, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data: `confirm_game_participation_${ctx.from.id}_${gameId}` }]
              ]
            }
          });

          await ctx.reply(
            '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –∏–≥—Ä—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^approve_post_(\d+)_(\w+)/)?.[0]:
        try {
          const [, userId, network] = data.split('_');
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          if (!originalMessage) {
            return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚úÖ –ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              }
            }
          );

          // –ù–∞—á–∏—Å–ª—è–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const rewards = {
            vk: 300,
            instagram: 300,
            telegram: 200,
            ok: 200
          };

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ BigInt –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
          const telegramId = BigInt(userId);
          const user = await prisma.user.findUnique({
            where: { telegramId }
          });

          if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await prisma.user.update({
              where: { id: user.id },
              data: { balance: { increment: rewards[network] } }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—É—Ä–∞–∂–∏–∫–æ–≤
            await ctx.telegram.sendMessage(
              userId,
              `‚úÖ –í–∞—à –ø–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n` +
              `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${rewards[network]} –∫—É—Ä–∞–∂–∏–∫–æ–≤.\n` +
              `–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'earn' }]
                  ]
                }
              }
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case data.match(/^reject_post_(\d+)_(\w+)/)?.[0]:
        try {
          const [, userId, network] = data.split('_');
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
              }
            }
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
          await ctx.telegram.sendMessage(
            userId,
            '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `post_${network}` }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case 'list_games':
        try {
          const games = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          let message = '*–°–ø–∏—Å–æ–∫ –∏–≥—Ä*\n\n';
          
          if (games.length > 0) {
            games.forEach(game => {
              message += `üéÆ ${game.title}\n`;
              message += `üìÖ ${game.date.toLocaleDateString()}\n`;
              message += `‚è∞ ${game.date.toLocaleTimeString()}\n`;
              message += `üìç ${game.location}\n`;
              message += `üí∞ ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
              message += `üë• –ú–µ—Å—Ç: ${game.seats}\n\n`;
            });
          } else {
            message += '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n';
          }

          const keyboard = [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', callback_data: 'add_game' }],
            [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', callback_data: 'edit_game' }],
            [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', callback_data: 'delete_game' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
          ];

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      default:
        ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await ctx.answerCbQuery();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

async function handleQualification(ctx, qualificationNumber) {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: user.id },
        data: { qualification: `qualification_${qualificationNumber}` }
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const welcomeVideo = await prisma.welcomeVideo.findFirst({
        where: { qualification: `qualification_${qualificationNumber}` }
      });

      if (welcomeVideo) {
        await ctx.replyWithVideo(welcomeVideo.fileId, {
          caption: '–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ö—É—Ä–∞–∂–∏–∫–∏, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!'
        });
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É—Ä–∞–∂–∏–∫–∏
      await prisma.user.update({
        where: { id: user.id },
        data: { balance: { increment: 1000 } }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      require('./menu')(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
