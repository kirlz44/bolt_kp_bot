const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

// –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é getMenuKeyboard
function getMenuKeyboard(userRole) {
  let keyboard = [
    [{ text: 'ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º', callback_data: 'become_partner' }],
    [{ text: 'üé° –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã', callback_data: 'spin_wheel' }],
    [{ text: 'üõç –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }],
    [{ text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'games' }],
    [{ text: 'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'events' }],
    [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å', callback_data: 'earn' }],
    [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data: 'referral_program' }],
    [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
  ];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (userRole === 'admin' || userRole === 'superadmin') {
    keyboard.push([{ text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞
  if (userRole === 'partner') {
    keyboard.push([{ text: 'üéÆ –ú–æ–∏ –∏–≥—Ä—ã', callback_data: 'my_games' }]);
  }

  return keyboard;
}

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleQualification
async function handleQualification(ctx, qualificationNumber) {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await prisma.user.update({
        where: { id: user.id },
        data: { qualification: `qualification_${qualificationNumber}` }
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const welcomeVideo = await prisma.welcomeVideo.findFirst({
        where: { qualification: `qualification_${qualificationNumber}` }
      });

      if (welcomeVideo) {
        await ctx.replyWithVideo(welcomeVideo.fileId, {
          caption: '–í –Ω–∞—à–µ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—Ä–∞—â–∞—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ö—É—Ä–∞–∂–∏–∫–∏, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∏–≥—Ä—ã –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!'
        });
      }

      // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É—Ä–∞–∂–∏–∫–∏
      await prisma.user.update({
        where: { id: user.id },
        data: { balance: { increment: 1000 } }
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
      require('./menu')(ctx);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
module.exports = async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const userRole = ctx.state.userRole;

    switch (data) {
      case 'start_bot':
        await ctx.reply('–ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ –≤—ã', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üë®‚Äçüíº –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç', callback_data: 'qualification_1' }],
              [{ text: 'üéÆ –ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫, –ø—Ä–æ–≤–æ–∂—É –∏–≥—Ä—ã', callback_data: 'qualification_2' }],
              [{ text: 'üé™ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π', callback_data: 'qualification_3' }],
              [{ text: 'üë®‚Äçüè´ –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä', callback_data: 'qualification_4' }],
              [{ text: 'üëî –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ HR', callback_data: 'qualification_5' }],
              [{ text: 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –≤–∞—à–∞ –¥–≤–∏–∂—É—Ö–∞', callback_data: 'qualification_6' }],
              [{ text: 'üå± –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', callback_data: 'qualification_7' }],
              [{ text: 'üé≤ –ê–≤—Ç–æ—Ä –∏–≥—Ä', callback_data: 'qualification_8' }],
              [{ text: 'üß† –ü—Å–∏—Ö–æ–ª–æ–≥', callback_data: 'qualification_9' }],
              [{ text: 'üé® –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∏–≥—Ä—É', callback_data: 'qualification_10' }],
              [{ text: 'üîÑ –°–µ—Ç–µ–≤–æ–π MLM-–±–∏–∑–Ω–µ—Å', callback_data: 'qualification_11' }],
              [{ text: 'üíÖ –ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞', callback_data: 'qualification_12' }]
            ]
          }
        });
        break;

      case data.match(/^qualification_\d+/)?.[0]:
        const qualificationNumber = data.split('_')[1];
        await handleQualification(ctx, qualificationNumber);
        break;

      case 'open_menu':
        try {
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          const message = 
            `*üé™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—É–¥–∏—é –ö—É—Ä–∞–∂ –ü—Ä–æ–¥–∞–∂!*\n\n` +
            `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user?.balance || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n` +
            `*–û –Ω–∞—à–µ–º –±–æ—Ç–µ:*\n` +
            `‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –∏–≥—Ä–∞—Ö –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–¥–∞–∂\n` +
            `‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã\n` +
            `‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –æ–±—É—á–∞—é—â–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n` +
            `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n` +
            `‚Ä¢ –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã\n` +
            `‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ\n\n` +
            `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
            `üéÆ –ò–≥—Ä—ã - —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n` +
            `üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏\n` +
            `üé° –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã - –∏—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É\n` +
            `üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å - –ø–æ–ª—É—á–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n` +
            `üõçÔ∏è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å - –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –∫—É—Ä–∞–∂–∏–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã\n` +
            `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏\n` +
            `ü§ù –°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º - –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π`;

          const keyboard = getMenuKeyboard(userRole);

          if (ctx.callbackQuery) {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'check_balance':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É balance
        require('./balance')(ctx);
        break;

      case 'how_to_earn':
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É earn
        require('./earn')(ctx);
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback_data –∏–∑ –º–µ–Ω—é
      case 'become_partner':
        require('./becomePartner')(ctx);
        break;

      case 'spin_wheel':
        require('./spinWheel')(ctx);
        break;

      case 'marketplace':
        try {
          const products = await prisma.product.findMany({
            where: {
              stock: {
                gt: 0
              }
            }
          });

          let message = '*–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å*\n\n';
          
          if (products.length > 0) {
            message += '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
            products.forEach(product => {
              message += `üì¶ ${product.name} - ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            });
            message += '\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥"';

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await ctx.deleteMessage();
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìë –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'show_catalog' }],
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          } else {
            await ctx.deleteMessage();
            await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'games':
        try {
          const games = await prisma.game.findMany({
            where: {
              date: {
                gte: new Date()
              }
            },
            orderBy: {
              date: 'asc'
            }
          });

          const message = games.length === 0 
            ? '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä'
            : '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:';

          const keyboard = games.map(game => ([{
            text: `${game.title} - ${game.date.toLocaleDateString()}`,
            callback_data: `view_game_${game.id}`
          }]));

          keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'events':
        try {
          const events = await prisma.event.findMany({
            where: {
              date: {
                gte: new Date()
              }
            },
            orderBy: {
              date: 'asc'
            },
            include: {
              participants: true
            }
          });

          let message = events.length === 0 
            ? '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π'
            : '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:*\n\n';

          const keyboard = [];

          if (events.length > 0) {
            for (const event of events) {
              message += `üé™ ${event.title}\n`;
              message += `üìÖ ${event.date.toLocaleDateString()}\n`;
              message += `‚è∞ ${event.date.toLocaleTimeString()}\n`;
              message += `üìç ${event.location}\n`;
              message += `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${event.seats - event.participants.length}\n`;
              message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.priceRub > 0 ? `${event.priceRub}‚ÇΩ / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}\n\n`;

              keyboard.push([{ 
                text: `‚úçÔ∏è ${event.title} - ${event.date.toLocaleDateString()}`, 
                callback_data: `view_event_${event.id}` 
              }]);
            }
          }

          keyboard.push([{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'admin_panel':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./adminPanel')(ctx);
        } else {
          ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      case 'manage_welcome_videos':
        require('./manageWelcomeVideos')(ctx);
        break;

      case 'manage_wheel':
        require('./manageWheel')(ctx);
        break;

      case 'manage_products':
        require('./manageProducts')(ctx);
        break;

      case 'manage_games':
        require('./manageGames')(ctx);
        break;

      case 'create_event':
        require('./createEvent')(ctx);
        break;

      case 'broadcast':
        require('./broadcast')(ctx);
        break;

      case 'manage_activities':
        require('./manageActivities')(ctx);
        break;

      case 'view_statistics':
        require('./viewStatistics')(ctx);
        break;

      case data.match(/^upload_video_\d+/)?.[0]:
        const qualificationId = data.split('_')[2];
        ctx.scene.enter('upload_video_scene', { qualificationId });
        break;

      case 'add_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_wheel_prize_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case 'list_wheel_prizes':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizes = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          let message = '*–°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã:*\n\n';
          let totalProbability = 0;
          
          prizes.forEach(prize => {
            message += `üéÅ ${prize.name}\n`;
            message += `–í–µ—Ä—è—Ç–Ω–æ—Å—Ç—å: ${prize.probability}%\n\n`;
            totalProbability += prize.probability;
          });
          
          message += `\n–û–±—â–∞—è —Å—É–º–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π: ${totalProbability}%`;
          
          await ctx.editMessageText(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
              ]
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case 'delete_wheel_prize':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizes = await prisma.wheelPrize.findMany({
            where: { active: true }
          });
          
          if (prizes.length === 0) {
            return ctx.editMessageText('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]
                ]
              }
            });
          }

          const keyboard = prizes.map(prize => [{
            text: `${prize.name} (${prize.probability}%)`,
            callback_data: `delete_prize_${prize.id}`
          }]);

          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_wheel' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data.match(/^delete_prize_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const prizeId = parseInt(data.split('_')[2]);
          try {
            await prisma.wheelPrize.update({
              where: { id: prizeId },
              data: { active: false }
            });
            
            await ctx.editMessageText('–ü—Ä–∏–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–ª–µ—Å–æ–º', callback_data: 'manage_wheel' }]
                ]
              }
            });
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞');
          }
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–∑–∞–º–∏');
        }
        break;

      case data.match(/^prize_given_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const winnerTelegramId = data.split('_')[2];
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ –ø—Ä–∏–∑–∞
          await ctx.editMessageText(
            ctx.update.callback_query.message.text + 
            `\n\n‚úÖ –ü—Ä–∏–∑ –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–æ—Ä–æ–º ${adminUsername}`
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
          await ctx.telegram.sendMessage(
            winnerTelegramId,
            'üéÅ –í–∞—à —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –≥–æ—Ç–æ –∫ –≤—ã–¥–∞—á–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
          );
        }
        break;

      case 'earn':
        require('./earn')(ctx);
        break;

      case data.match(/^post_(vk|instagram|telegram|ok)$/)?.[0]:
        const network = data.split('_')[1];
        ctx.scene.enter('post_verification_scene', { network });
        break;

      case 'get_referral_link':
        require('./getReferralLink')(ctx);
        break;

      case 'add_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏');
        }
        break;

      case 'list_products':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const products = await prisma.product.findMany();
          let message = '*–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:*\n\n';
          
          products.forEach(product => {
            message += `üì¶ *${product.name}*\n`;
            message += `üìù ${product.description}\n`;
            message += `üí∞ ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
            message += `üìä –ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n`;
          });

          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_products' }]
              ]
            }
          });
        }
        break;

      case 'delete_product':
        if (userRole === 'admin' || userRole === 'superadmin') {
          const products = await prisma.product.findMany();
          const keyboard = products.map(product => ([{
            text: product.name,
            callback_data: `confirm_delete_product_${product.id}`
          }]));
          
          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_products' }]);
          
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: { inline_keyboard: keyboard }
          });
        }
        break;

      case data.match(/^confirm_delete_product_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          const productId = parseInt(data.split('_')[3]);
          await prisma.product.delete({ where: { id: productId } });
          await ctx.reply('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', callback_data: 'manage_products' }]
              ]
            }
          });
        }
        break;

      case 'edit_products':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('edit_product_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏');
        }
        break;

      case data.match(/^view_product_(\d+)/)?.[0]:
        try {
          const productId = parseInt(data.split('_')[2]);
          const product = await prisma.product.findUnique({
            where: { id: productId }
          });

          if (!product) {
            return ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞
          const discountCode = ctx.session?.discountCode;
          let discountPercent = 0;
          if (discountCode && discountCode.startsWith('WHEEL') && discountCode.includes('D')) {
            discountPercent = parseInt(discountCode.match(/D(\d+)/)[1]);
          }

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
          const originalPriceRub = product.priceRub;
          const originalPriceKur = product.priceKur;
          const discountedPriceRub = Math.round(originalPriceRub * (1 - discountPercent / 100));
          const discountedPriceKur = Math.round(originalPriceKur * (1 - discountPercent / 100));

          let message = `üì¶ *${product.name}*\n\n`;
          message += `üìù ${product.description}\n\n`;
          
          if (discountPercent > 0) {
            message += `üí∞ –¶–µ–Ω–∞: ~~${originalPriceRub}‚ÇΩ~~ *${discountedPriceRub}‚ÇΩ*\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ~~${originalPriceKur}~~ *${discountedPriceKur}*\n`;
            message += `üè∑ –°–∫–∏–¥–∫–∞: ${discountPercent}%\n`;
          } else {
            message += `üí∞ –¶–µ–Ω–∞: ${originalPriceRub}‚ÇΩ\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ${originalPriceKur}\n`;
          }
          
          message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

          const keyboard = [
            [
              { text: 'üí≥ –ö—É–ø–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏', callback_data: `buy_product_money_${productId}` },
              { text: 'üíé –ö—É–ø–∏—Ç—å –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: `buy_product_kurajiki_${productId}` }
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
          ];

          if (product.imageId) {
            await ctx.replyWithPhoto(product.imageId, {
              caption: message,
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.reply(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–æ–≤–∞—Ä–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^buy_product_(money|kurajiki)_(\d+)/)?.[0]:
        const [, productPaymentType, productId] = data.split('_');
        if (productPaymentType === 'money') {
          require('./buyProduct')(ctx);
        } else {
          require('./buyProductWithKurajiki')(ctx);
        }
        break;

      case data.match(/^product_given_(\d+)_(\d+)/)?.[0]:
        if (userRole === 'admin' || userRole === 'superadmin') {
          try {
            const [, userId, productId] = data.split('_');
            const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∞
            await ctx.editMessageText(
              ctx.update.callback_query.message.text + 
              `\n\n‚úÖ –¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
              {
                parse_mode: 'HTML',
                reply_markup: {
                  inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
                }
              }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            await ctx.telegram.sendMessage(
              userId,
              '‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            if (ctx.chat.id.toString() !== process.env.ADMIN_CHAT_ID) {
              await ctx.telegram.sendMessage(
                process.env.ADMIN_CHAT_ID,
                `üì¶ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É\n` +
                `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${adminUsername}\n` +
                `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: ${userId}\n` +
                `–¢–æ–≤–∞—Ä ID: ${productId}`
              );
            }

          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞:', error);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É, –∞ –Ω–µ –≤ —á–∞—Ç
            await ctx.telegram.sendMessage(
              ctx.from.id,
              '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞, –Ω–æ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
            );
          }
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞–º–∏');
        }
        break;

      case 'show_catalog':
        try {
          const products = await prisma.product.findMany({
            where: { stock: { gt: 0 } }
          });

          if (products.length === 0) {
            return ctx.editMessageText('–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'marketplace' }]
                ]
              }
            });
          }

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ
          for (const product of products) {
            let message = `üì¶ *${product.name}*\n\n`;
            if (product.description) {
              message += `üìù ${product.description}\n\n`;
            }
            message += `üí∞ –¶–µ–Ω–∞: ${product.priceRub}‚ÇΩ\n`;
            message += `üíé –¶–µ–Ω–∞ –≤ –∫—É—Ä–∞–∂–∏–∫–∞—Ö: ${product.priceKur}\n`;
            message += `üìä –í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.\n`;

            const keyboard = {
              inline_keyboard: [
                [
                  { text: 'üí≥ –ö—É–ø–∏—Ç—å –∑–∞ –¥–µ–Ω—å–≥–∏', callback_data: `buy_product_money_${product.id}` },
                  { text: 'üíé –ö—É–ø–∏—Ç—å –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: `buy_product_kurajiki_${product.id}` }
                ]
              ]
            };

            if (product.imageId) {
              await ctx.replyWithPhoto(product.imageId, {
                caption: message,
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            } else {
              await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
              });
            }
          }

          // –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
          await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
              ]
            }
          });

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.');
        }
        break;

      case 'referral_program':
        try {
          const user = await prisma.user.findUnique({
            where: { telegramId: ctx.from.id }
          });
          
          if (user) {
            const referrals = await prisma.referral.findMany({
              where: { referrerId: user.id },
              include: { user: true }
            });

            let message = 'üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:*\n\n';
            
            if (referrals.length > 0) {
              message += '*–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è:*\n';
              referrals.forEach((ref, index) => {
                const username = ref.user.telegramId;
                message += `${index + 1}. ID: ${username}\n`;
              });
            } else {
              message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n';
            }

            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
                  [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'copy_referral_link':
        try {
          const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
          const referralLink = `https://t.me/${botUsername}?start=${ctx.from.id}`;
          
          await ctx.editMessageText(
            'üîó –í–æ—Ç –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n' +
            `\`${referralLink}\`\n\n` +
            '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'referral_program' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^view_game_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[2]);
          const game = await prisma.game.findUnique({
            where: { id: gameId }
          });

          if (!game) {
            return ctx.editMessageText('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            });
          }

          let message = `üéÆ *${game.title}*\n\n`;
          if (game.description) {
            message += `üìù ${game.description}\n\n`;
          }
          message += `üìÖ –î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n`;
          message += `‚è∞ –í–µ–º—è: ${game.date.toLocaleTimeString()}\n`;
          message += `üìç –ú–µ—Å—Ç–æ: ${game.location}\n`;
          message += `üí∞ –¶–µ–Ω–∞: ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
          message += `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${game.seats}\n`;

          const keyboard = [
            [
              { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏', callback_data: `pay_game_money_${gameId}` },
              { text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: `pay_game_kurajiki_${gameId}` }
            ],
            [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
          ];

          if (game.imageId) {
            await ctx.replyWithPhoto(game.imageId, {
              caption: message,
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          } else {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: { inline_keyboard: keyboard }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^pay_game_(money|kurajiki)_(\d+)/)?.[0]:
        try {
          const [action, paymentType, gameId] = data.split('_');
          console.log('–¢–∏–ø –æ–ø–ª–∞—Ç—ã:', paymentType);
          console.log('ID –∏–≥—Ä—ã:', gameId);

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
          const game = await prisma.game.findUnique({
            where: { 
              id: parseInt(gameId) 
            },
            include: {
              creator: true
            }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä –Ω–µ –Ω–∞–¥–µ–Ω–∞');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É (–∞–¥–º–∏–Ω –∏–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä)
          const isAdminGame = game.creator.role === 'admin' || game.creator.role === 'superadmin';

          if (paymentType === 'money') {
            if (isAdminGame) {
              // –î–ª—è –∏–≥—Ä –æ—Ç –∞–¥–º–∏–Ω–∞ - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Robokassa
              await require('./payGame')(ctx, gameId);
            } else {
              // –î–ª—è –∏–≥—Ä –æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              const paymentMessage = 
                `üí≥ –û–ø–ª–∞—Ç–∞ –∏–≥—Ä—ã "${game.title}"\n\n` +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${game.priceRub}‚ÇΩ\n\n` +
                `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${game.paymentType === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : '–¢–µ–ª–µ—Ñ–æ–Ω'}\n` +
                `–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${game.paymentDetails}\n\n` +
                `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: @${game.creator.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

              await ctx.reply(paymentMessage, {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)', callback_data: `confirm_game_payment_${gameId}` }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `view_game_${gameId}` }]
                  ]
                }
              });
            }
          } else if (paymentType === 'kurajiki') {
            // –û–ø–ª–∞—Ç–∞ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–≥—Ä—ã
            await require('./payGameWithKurajiki')(ctx, gameId);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^confirm_game_payment_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[3]);
          const game = await prisma.game.findUnique({
            where: { id: gameId },
            include: { creator: true }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–π –æ–ø–ª–∞—Ç–µ
          const paymentMessage = 
            `üí∞ –ù–æ–≤–∞—è –ø–ª–∞—Ç–∞ –∑–∞ –∏–≥—Ä—É!\n\n` +
            `–ò–≥—Ä–∞: ${game.title}\n` +
            `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
            `–°—É–º–º–∞: ${game.priceRub}‚ÇΩ\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}`;

          await ctx.telegram.sendMessage(game.creator.telegramId, paymentMessage, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `approve_game_payment_${ctx.from.id}_${gameId}` }],
                [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `reject_game_payment_${ctx.from.id}_${gameId}` }]
              ]
            }
          });

          await ctx.reply(
            '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^game_contact_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[2]);
          const game = await prisma.game.findUnique({
            where: { id: gameId },
            include: {
              creator: true
            }
          });

          if (!game) {
            return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
          const contactMessage = 
            `üéÆ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏–≥—Ä—É!\n\n` +
            `–ò–≥—Ä–∞: ${game.title}\n` +
            `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}`;

          await ctx.telegram.sendMessage(game.creator.telegramId, contactMessage, {
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ', callback_data: `confirm_game_participation_${ctx.from.id}_${gameId}` }]
              ]
            }
          });

          await ctx.reply(
            '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –∏–≥—Ä—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^approve_post_(\d+)_(\w+)/)?.[0]:
        try {
          const [, userId, network] = data.split('_');
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          if (!originalMessage) {
            return ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚úÖ –ü–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
              }
            }
          );

          // –ù–∞—á–∏—Å–ª—è–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const rewards = {
            vk: 300,
            instagram: 300,
            telegram: 200,
            ok: 200
          };

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º userId –≤ BigInt –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ
          const telegramId = BigInt(userId);
          const user = await prisma.user.findUnique({
            where: { telegramId }
          });

          if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updatedUser = await prisma.user.update({
              where: { id: user.id },
              data: { balance: { increment: rewards[network] } }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—É—Ä–∞–∂–∏–∫–æ–≤
            await ctx.telegram.sendMessage(
              userId,
              `‚úÖ –í–∞—à –ø–æ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n` +
              `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${rewards[network]} –∫—É—Ä–∞–∂–∏–∫–æ–≤.\n` +
              `–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${updatedUser.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'earn' }]
                  ]
                }
              }
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case data.match(/^reject_post_(\d+)_(\w+)/)?.[0]:
        try {
          const [, userId, network] = data.split('_');
          const adminUsername = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
          const originalMessage = ctx.callbackQuery.message.caption;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
          await ctx.editMessageCaption(
            `${originalMessage}\n\n‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminUsername}`,
            {
              reply_markup: {
                inline_keyboard: [] // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
              }
            }
          );

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞
          await ctx.telegram.sendMessage(
            userId,
            '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –ø–æ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥—Ç–µ—Å—å, —á—Ç –ø–æ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `post_${network}` }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
        }
        break;

      case 'list_games':
        try {
          const games = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          let message = '*–°–ø–∏—Å–æ–∫ –∏–≥—Ä*\n\n';
          
          if (games.length > 0) {
            games.forEach(game => {
              message += `üéÆ ${game.title}\n`;
              message += `üìÖ ${game.date.toLocaleDateString()}\n`;
              message += `‚è∞ ${game.date.toLocaleTimeString()}\n`;
              message += `üìç ${game.location}\n`;
              message += `üí∞ ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
              message += `üë• –ú–µ—Å—Ç: ${game.seats}\n\n`;
            });
          } else {
            message += '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n';
          }

          const keyboard = [
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', callback_data: 'add_game' }],
            [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', callback_data: 'edit_game' }],
            [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', callback_data: 'delete_game' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
          ];

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'edit_game':
        try {
          const games = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          if (games.length === 0) {
            await ctx.deleteMessage();
            return ctx.reply('–ù–µ—Ç –∏–≥—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          let message = '*–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n';
          
          const keyboard = games.map(game => ([{
            text: `${game.title} - ${game.date.toLocaleDateString()}`,
            callback_data: `edit_game_${game.id}`
          }]));

          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^edit_game_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[2]);
          const game = await prisma.game.findUnique({
            where: { id: gameId }
          });

          if (!game) {
            return ctx.editMessageText('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'edit_game' }]
                ]
              }
            });
          }

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          const editMessage = 
            `*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:* ${game.title}\n\n` +
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:';

          const editKeyboard = [
            [{ text: 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_game_title_${gameId}` }],
            [{ text: 'üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', callback_data: `edit_game_date_${gameId}` }],
            [{ text: 'üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è', callback_data: `edit_game_location_${gameId}` }],
            [{ text: 'üí∞ –¶–µ–Ω–∞', callback_data: `edit_game_price_${gameId}` }],
            [{ text: 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç', callback_data: `edit_game_seats_${gameId}` }],
            [{ text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_game_description_${gameId}` }],
            [{ text: 'üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', callback_data: `edit_game_image_${gameId}` }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'edit_game' }]
          ];

          await ctx.editMessageText(editMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: editKeyboard
            }
          });

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      case data.match(/^edit_game_(title|date|location|price|seats|description|image)_\d+/)?.[0]:
        try {
          const [, , param, gameId] = data.split('_');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–Ω–Ω—ã–µ  —Å–µ–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          ctx.session = {
            ...ctx.session,
            editingGame: {
              id: parseInt(gameId),
              param: param
            }
          };
          
          let promptMessage;
          switch (param) {
            case 'title':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:';
              break;
            case 'date':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:';
              break;
            case 'location':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:';
              break;
            case 'price':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1000 2000"):';
              break;
            case 'seats':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:';
              break;
            case 'description':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:';
              break;
            case 'image':
              promptMessage = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã:';
              break;
          }

          await ctx.scene.enter('edit_game_scene', { promptMessage });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'delete_game':
        try {
          const games = await prisma.game.findMany({
            orderBy: {
              date: 'asc'
            }
          });

          if (games.length === 0) {
            await ctx.deleteMessage();
            return ctx.reply('–ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          let message = '*–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*\n\n';
          games.forEach(game => {
            message += `üéÆ ${game.title}\n`;
            message += `üìÖ ${game.date.toLocaleDateString()}\n`;
            message += `‚è∞ ${game.date.toLocaleTimeString()}\n`;
            message += `üìç ${game.location}\n\n`;
          });

          const keyboard = games.map(game => ([{
            text: `${game.title} - ${game.date.toLocaleDateString()}`,
            callback_data: `confirm_delete_game_${game.id}`
          }]));

          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]);

          // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await ctx.deleteMessage();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä
          await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–≥—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error);
          await ctx.reply('–ü—Ä–∏–æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^confirm_delete_game_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[3]);
          const game = await prisma.game.findUnique({
            where: { id: gameId }
          });

          if (!game) {
            return ctx.editMessageText('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'delete_game' }]
                ]
              }
            });
          }

          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
          await ctx.editMessageText(
            `‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É "${game.title}"?\n` +
            `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
            `–í—Ä–µ–º—è: ${game.date.toLocaleTimeString()}\n` +
            `–ú–µ—Å—Ç–æ: ${game.location}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `delete_game_confirmed_${gameId}` },
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'delete_game' }
                  ]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^delete_game_confirmed_(\d+)/)?.[0]:
        try {
          const gameId = parseInt(data.split('_')[3]);
          
          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
          await prisma.game.delete({
            where: { id: gameId }
          });

          await ctx.editMessageText('‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º', callback_data: 'manage_games' }]
              ]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'add_game':
        try {
          if (userRole !== 'admin' && userRole !== 'superadmin') {
            return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_games' }]
                ]
              }
            });
          }

          // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Å—Ü–µ–Ω—É
          await ctx.deleteMessage();
          
          // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã
          await ctx.scene.enter('add_game_scene');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä—ã:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'manage_events':
        require('./manageEvents')(ctx);
        break;

      case 'add_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          await ctx.scene.enter('add_event_scene');
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case 'edit_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./editEvent')(ctx);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case 'delete_event':
        if (userRole === 'admin' || userRole === 'superadmin') {
          require('./deleteEvent')(ctx);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
        break;

      case data.match(/^confirm_delete_event_(\d+)/)?.[0]:
        try {
          const eventId = parseInt(data.split('_')[3]);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
          const event = await prisma.event.findUnique({
            where: { id: eventId },
            include: { 
              participants: {
                select: {
                  id: true,
                  telegramId: true,
                  balance: true
                }
              }
            }
          });

          if (!event) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
          for (const participant of event.participants) {
            try {
              // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏
              if (event.priceKur > 0) {
                await prisma.user.update({
                  where: { id: participant.id },
                  data: { 
                    balance: { increment: event.priceKur } 
                  }
                });
              }

              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É
              await ctx.telegram.sendMessage(
                participant.telegramId.toString(),
                `‚ùå –í–∞–∂–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!\n\n` +
                `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" –æ—Ç–º–µ–Ω–µ–Ω–æ.\n` +
                `üìÖ –î–∞—Ç–∞: ${event.date.toLocaleDateString()}\n` +
                `‚è∞ –í—Ä–µ–º—è: ${event.date.toLocaleTimeString()}\n` +
                `üìç –ú–µ—Å—Ç–æ: ${event.location}\n` +
                (event.priceKur > 0 ? 
                  `\nüíé ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n` : '') +
                  '\n–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.'
              );
            } catch (error) {
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participant.telegramId}:`, error);
            }
          }

          // –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          await prisma.event.delete({
            where: { id: eventId }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
          await ctx.editMessageText(
            `‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ\n` +
            `–£–≤–µ–¥–æ–º–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${event.participants.length}\n` +
            (event.priceKur > 0 ? 
              `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∫–∞–∂–¥–æ–º—É: ${event.priceKur}\n` : ''),
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏', callback_data: 'manage_events' }]
                ]
              }
            }
          );

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^edit_event_(title|date|location|price|seats|description)_(\d+)/)?.[0]:
        try {
          const [, param, eventId] = data.split('_');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          ctx.session = {
            ...ctx.session,
            editingEvent: {
              id: parseInt(eventId),
              param: param
            }
          };
          
          let promptMessage;
          switch (param) {
            case 'title':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:';
              break;
            case 'date':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:';
              break;
            case 'location':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:';
              break;
            case 'price':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–£–ë–õ–ò –ö–£–†–ê–ñ–ò–ö–ò" –∏–ª–∏ "0 0":';
              break;
            case 'seats':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:';
              break;
            case 'description':
              promptMessage = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:';
              break;
          }

          await ctx.scene.enter('edit_event_scene', { promptMessage });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^register_event_(\d+)/)?.[0]:
        try {
          const eventId = parseInt(data.split('_')[2]);
          const event = await prisma.event.findUnique({
            where: { id: eventId },
            include: { participants: true }
          });

          if (!event) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          if (event.seats <= event.participants.length) {
            return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã');
          }

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!user) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const isAlreadyRegistered = event.participants.some(p => p.id === user.id);
          if (isAlreadyRegistered) {
            return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
          }

          if (event.priceRub > 0) {
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
            await ctx.reply(
              `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: ${event.priceRub}‚ÇΩ –∏–ª–∏ ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
              '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–µ–Ω—å–≥–∞–º–∏', callback_data: `pay_event_money_${eventId}` },
                      { text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: `pay_event_kurajiki_${eventId}` }
                    ]
                  ]
                }
              }
            );
          } else {
            // –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ, —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            await prisma.event.update({
              where: { id: eventId },
              data: {
                participants: {
                  connect: { id: user.id }
                }
              }
            });

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            await ctx.reply(
              '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
              {
                reply_markup: {
                  keyboard: [
                    [{
                      text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
                      request_contact: true
                    }]
                  ],
                  resize_keyboard: true,
                  one_time_keyboard: true
                }
              }
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await ctx.telegram.sendMessage(
              process.env.ADMIN_CHAT_ID,
              ` –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
              `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
              `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
              `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^pay_event_(money|kurajiki)_(\d+)/)?.[0]:
        try {
          // –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º callback_data
          const eventId = parseInt(data.match(/^pay_event_(?:money|kurajiki)_(\d+)/)[1]);
          const paymentType = data.includes('money') ? 'money' : 'kurajiki';

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Ç—å ID
          if (isNaN(eventId)) {
            console.log('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
            return;
          }

          // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          const event = await prisma.event.findUnique({
            where: { 
              id: eventId 
            },
            include: { 
              creator: true,
              participants: true
            }
          });

          if (!event) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!user) {
            await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }

          if (paymentType === 'kurajiki') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if (user.balance < event.priceKur) {
              await ctx.reply(
                '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.\n' +
                `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
                `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
                {
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: 'earn' }],
                      [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é', callback_data: `view_event_${eventId}` }]
                    ]
                  }
                }
              );
              return;
            }

            try {
              // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
              await prisma.$transaction([
                prisma.user.update({
                  where: { id: user.id },
                  data: { balance: { decrement: event.priceKur } }
                }),
                prisma.event.update({
                  where: { id: eventId },
                  data: {
                    participants: {
                      connect: { id: user.id }
                    }
                  }
                })
              ]);

              // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              await ctx.reply(
                '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                {
                  reply_markup: {
                    keyboard: [
                      [{
                        text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º',
                        request_contact: true
                      }]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                  }
                }
              );

              // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
              await ctx.telegram.sendMessage(
                process.env.ADMIN_CHAT_ID,
                `üíé –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏!\n\n` +
                `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
                `–°—É–º–º–∞: ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
                `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
                `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
                `ID: ${ctx.from.id}`
              );

            } catch (transactionError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionError);
              await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
          } else {
            // –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Robokassa
            const isTestMode = process.env.ROBOKASSA_TEST_MODE === 'true';
            const paymentUrl = generatePaymentUrl(
              event.priceRub,
              `–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: ${event.title}`,
              isTestMode
            );

            await ctx.reply(
              `–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "${event.title}" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
              `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${event.priceRub}‚ÇΩ`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }],
                    [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é', callback_data: `view_event_${eventId}` }]
                  ]
                }
              }
            );
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^view_event_(\d+)/)?.[0]:
        try {
          const eventId = parseInt(data.split('_')[2]);
          const event = await prisma.event.findUnique({
            where: { id: eventId },
            include: { participants: true }
          });

          if (!event) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          const isRegistered = event.participants.some(p => p.id === user?.id);

          const message = {
            text: `üé™ ${event.title}\n\n` +
                  `üìù ${event.description || ''}\n` +
                  `üìÖ ${event.date.toLocaleDateString()}\n` +
                  `‚è∞ ${event.date.toLocaleTimeString()}\n` +
                  `üìç ${event.location}\n` +
                  `üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: ${event.seats - event.participants.length}\n\n` +
                  `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.priceRub > 0 ? `${event.priceRub}‚ÇΩ / ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}`,
            reply_markup: {
              inline_keyboard: [
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                [{ 
                  text: isRegistered ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å' : '‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 
                  callback_data: isRegistered ? `cancel_event_registration_${event.id}` : `register_event_${event.id}` 
                }],
                [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'events' }]
              ]
            }
          };

          if (event.imageId) {
            await ctx.replyWithPhoto(event.imageId, message);
          } else {
            await ctx.reply(message.text, message);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π case –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      case data.match(/^cancel_event_registration_(\d+)/)?.[0]:
        try {
          const eventId = parseInt(data.split('_')[3]);
          const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(ctx.from.id) }
          });

          if (!user) {
            return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }

          const event = await prisma.event.findUnique({
            where: { id: eventId },
            include: { participants: true }
          });

          if (!event) {
            return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ –∫—É—Ä–∞–∂–∏–∫–∞–º–∏
          if (event.priceKur > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await prisma.user.update({
              where: { id: user.id },
              data: { balance: { increment: event.priceKur } }
            });
          }

          // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
          await prisma.event.update({
            where: { id: eventId },
            data: {
              participants: {
                disconnect: { id: user.id }
              }
            }
          });

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          await ctx.telegram.sendMessage(
            process.env.ADMIN_CHAT_ID,
            `‚ùå –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n` +
            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
            `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
            `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
            `ID: ${ctx.from.id}\n` +
            `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
            (event.priceKur > 0 ? `–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤: ${event.priceKur}` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
          );

          await ctx.reply(
            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n' +
            (event.priceKur > 0 ? `üíé ${event.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.\n` : '') +
            '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –±—É–¥—É—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'events' }]
                ]
              }
            }
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case 'view_event_registrations':
        try {
          const events = await prisma.event.findMany({
            orderBy: {
              date: 'desc'
            }
          });

          if (events.length === 0) {
            await ctx.editMessageText('–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]
                ]
              }
            });
            return;
          }

          const keyboard = events.map(event => ([{
            text: `${event.title} - ${event.date.toLocaleDateString()}`,
            callback_data: `view_registrations_${event.id}`
          }]));

          keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'manage_events' }]);

          await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', {
            reply_markup: { inline_keyboard: keyboard }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      case data.match(/^view_registrations_(\d+)/)?.[0]:
        try {
          const eventId = parseInt(data.split('_')[2]);
          const event = await prisma.event.findUnique({
            where: { id: eventId },
            include: {
              participants: {
                select: {
                  id: true,
                  telegramId: true,
                  phoneNumber: true,
                  role: true,
                  balance: true
                }
              }
            }
          });

          if (!event) {
            await ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
          }

          if (event.participants.length === 0) {
            await ctx.editMessageText(
              `*${event.title}*\n\n–ù–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â—ë –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.`, {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                  ]
                }
              }
            );
            return;
          }

          let message = `*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}*\n`;
          message += `üìÖ ${event.date.toLocaleDateString()} ${event.date.toLocaleTimeString()}\n\n`;
          message += `–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${event.participants.length} –∏–∑ ${event.seats}\n\n`;
          message += '*–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:*\n\n';

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
          for (let i = 0; i < event.participants.length; i++) {
            const participant = event.participants[i];
            try {
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
              const telegramId = participant.telegramId.toString();
              const userInfo = await ctx.telegram.getChatMember(telegramId, telegramId);
              
              message += `${i + 1}. ${userInfo.user.first_name} ${userInfo.user.last_name || ''}\n`;
              message += `üë§ ID: ${telegramId}\n`;
              message += `${userInfo.user.username ? `@${userInfo.user.username}\n` : ''}`;
              message += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
            } catch (userError) {
              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              message += `${i + 1}. –£—á–∞—Å—Ç–Ω–∏–∫\n`;
              message += `üë§ ID: ${participant.telegramId.toString()}\n`;
              message += `üì± ${participant.phoneNumber || '–ù–æ–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n`;
              console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${participant.telegramId}:`, userError);
            }
          }

          // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
          const maxLength = 4096;
          if (message.length > maxLength) {
            const parts = message.match(new RegExp(`.{1,${maxLength}}`, 'g'));
            for (let i = 0; i < parts.length; i++) {
              if (i === parts.length - 1) {
                await ctx.reply(parts[i], {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    inline_keyboard: [
                      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                    ]
                  }
                });
              } else {
                await ctx.reply(parts[i], { parse_mode: 'Markdown' });
              }
            }
          } else {
            await ctx.editMessageText(message, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data: 'view_event_registrations' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        break;

      default:
        ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await ctx.answerCbQuery();

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
