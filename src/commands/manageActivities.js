const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π
    const rewards = await prisma.socialMediaReward.findMany();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è–º–∏
    const currentRewards = {};
    rewards.forEach(reward => {
      currentRewards[reward.platform] = reward.amount;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let message = '*üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏*\n\n';
    message += '–¢–µ–∫—É—â–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤:\n\n';
    message += `üì± Telegram: ${currentRewards.telegram || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
    message += `üì∏ Instagram: ${currentRewards.instagram || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
    message += `üíô –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ${currentRewards.vk || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
    message += `üë• –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: ${currentRewards.ok || 0} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n`;
    message += '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è:';

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü—Å–µ—Ç–∏
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üì± Telegram', callback_data: 'set_reward_telegram' },
          { text: 'üì∏ Instagram', callback_data: 'set_reward_instagram' }
        ],
        [
          { text: 'üíô –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data: 'set_reward_vk' },
          { text: 'üë• –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', callback_data: 'set_reward_ok' }
        ],
        [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]
      ]
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } else {
      // –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
