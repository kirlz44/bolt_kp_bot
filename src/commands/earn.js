const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const rewards = await prisma.socialMediaReward.findMany();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è–º–∏
    const currentRewards = {};
    rewards.forEach(reward => {
      currentRewards[reward.platform] = reward.amount;
    });

    const message = 
      'üí∞ *–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏:*\n\n' +
      '1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π:\n' +
      '- –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n' +
      '- –ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞—à–∏–º–∏ –¥—Ä—É–∑—å—è–º–∏: 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n' +
      '2Ô∏è‚É£ –†–∞–∑–º–µ—â–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:\n' +
      `- –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: ${currentRewards.vk || 300} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `- Instagram: ${currentRewards.instagram || 300} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `- Telegram: ${currentRewards.telegram || 200} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `- –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏: ${currentRewards.ok || 200} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n` +
      'üîó –†–µ–∫–ª–∞–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ:\n' +
      't.me/+HXj790SP9DgyYzdi\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞:';

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üì± –í–ö–æ–Ω—Ç–∞–∫—Ç–µ', callback_data: 'post_vk' },
          { text: 'üì∏ Instagram', callback_data: 'post_instagram' }
        ],
        [
          { text: '‚úàÔ∏è Telegram', callback_data: 'post_telegram' },
          { text: 'üë• –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏', callback_data: 'post_ok' }
        ],
        [{ text: 'üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', callback_data: 'get_referral_link' }],
        [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
      ]
    };

    if (ctx.callbackQuery) {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
        disable_web_page_preview: true
      });
    } else {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
        disable_web_page_preview: true
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ earn:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
