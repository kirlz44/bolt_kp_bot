const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    if (ctx.state.userRole !== 'admin' && ctx.state.userRole !== 'superadmin') {
      return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–≥—Ä–∞–º–∏');
    }

    const games = await prisma.game.findMany({
      orderBy: {
        date: 'asc'
      }
    });

    let message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–∞–º–∏*\n\n';

    if (games.length > 0) {
      message += '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã:\n\n';
      games.forEach(game => {
        message += `üéÆ ${game.title}\n`;
        message += `üìÖ ${game.date.toLocaleDateString()}\n`;
        message += `‚è∞ ${game.date.toLocaleTimeString()}\n`;
        message += `üìç ${game.location}\n`;
        message += `üí∞ ${game.priceRub}‚ÇΩ / ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
        message += `üë• –ú–µ—Å—Ç: ${game.seats}\n\n`;
      });
    } else {
      message += '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä\n';
    }

    const keyboard = [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É', callback_data: 'add_game' }],
      [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä', callback_data: 'list_games' }],
      [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É', callback_data: 'edit_game' }],
      [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É', callback_data: 'delete_game' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
    ];

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–∞–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
