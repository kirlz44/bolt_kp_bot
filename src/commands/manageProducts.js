const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    if (ctx.state.userRole !== 'admin' && ctx.state.userRole !== 'superadmin') {
      return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞–º–∏', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'admin_panel' }]]
        }
      });
    }

    const products = await prisma.product.findMany();
    let message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*\n\n';

    if (products.length > 0) {
      message += '–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n';
      products.forEach(product => {
        message += `üì¶ ${product.name}\n`;
        message += `üí∞ ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
        message += `üìä –ù–∞ —Å–∫–ª–∞–¥–µ: ${product.stock} —à—Ç.\n\n`;
      });
    } else {
      message += '–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n';
    }

    const keyboard = [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'add_product' }],
      [{ text: 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'list_products' }],
      [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'edit_products' }],
      [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'delete_product' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
