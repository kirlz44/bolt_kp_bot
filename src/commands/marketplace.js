const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const products = await prisma.product.findMany({
      where: {
        stock: {
          gt: 0
        }
      }
    });

    if (products.length > 0) {
      let message = '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n';
      const inlineKeyboard = products.map(product => {
        return [{
          text: `${product.name} - ${product.priceRub}‚ÇΩ / ${product.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤`,
          callback_data: `view_product_${product.id}`
        }];
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥"
      inlineKeyboard.push([{ text: 'üìë –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'show_catalog' }]);
      
      await ctx.reply(message, {
        reply_markup: {
          inline_keyboard: inlineKeyboard
        }
      });
    } else {
      await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
