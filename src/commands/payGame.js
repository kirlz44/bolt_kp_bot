const { PrismaClient } = require('@prisma/client');
const { generatePaymentUrl } = require('../services/robokassa');
const prisma = new PrismaClient();

module.exports = async (ctx, gameId) => {
  try {
    const userId = ctx.from.id;
    const parsedGameId = parseInt(gameId);

    if (isNaN(parsedGameId)) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–≥—Ä—ã:', gameId);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–≥—Ä—ã');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    const game = await prisma.game.findUnique({
      where: { id: parsedGameId }
    });

    if (!game) {
      return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (game.seats <= 0) {
      return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const isTestMode = process.env.ROBOKASSA_TEST_MODE === 'true';
    const paymentUrl = generatePaymentUrl(
      game.priceRub,
      `–û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ: ${game.title}`,
      isTestMode
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.reply(
      `–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ "${game.title}" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
      `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${game.priceRub}‚ÇΩ`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }],
            [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data: `view_game_${parsedGameId}` }]
          ]
        }
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
