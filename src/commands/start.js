const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const { checkUserRole, createUser } = require('../models/user');

module.exports = async (ctx) => {
  try {
    const userId = ctx.from.id;
    console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start ===');
    console.log('userId:', userId);
    
    const userRole = await checkUserRole(userId);
    console.log('userRole:', userRole);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    let startPayload = ctx.message?.text?.split(' ')[1] || ctx.startPayload;
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã:', ctx.message?.text);
    console.log('–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π startPayload:', startPayload);
    
    let referrerId = null;
    let referrer = null;
    
    if (startPayload) {
      try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        referrer = await prisma.user.findFirst({
          where: { 
            telegramId: BigInt(startPayload)
          }
        });

        if (referrer) {
          referrerId = referrer.telegramId;
          console.log('–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä:', {
            id: referrer.id,
            telegramId: referrer.telegramId.toString(),
            role: referrer.role
          });
        } else {
          console.log('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ telegramId:', startPayload);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ startPayload:', error);
      }
    }

    if (!userRole) {
      console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 1000 –∫—É—Ä–∞–∂–∏–∫–æ–≤
      const user = await createUser(userId, 'user', 1000);
      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —Å–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
      if (startPayload && referrerId && referrerId !== BigInt(userId)) {
        console.log('\n=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ===');
        console.log('–†–µ—Ñ–µ—Ä–µ—Ä –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', referrer);
        
        try {
          await prisma.$transaction(async (tx) => {
            // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
            await tx.referral.create({
              data: {
                userId: user.id,
                referrerId: referrer.id
              }
            });

            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            await tx.user.update({
              where: { id: referrer.id },
              data: { balance: { increment: 500 } }
            });

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await tx.bonus.create({
              data: {
                userId: referrer.id,
                amount: 500,
                description: '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è'
              }
            });

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            await ctx.telegram.sendMessage(
              referrer.telegramId.toString(),
              `üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name} (${ctx.from.first_name})!\n` +
              `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤!`
            );

            // –ò—â–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
            const secondLevelReferral = await tx.referral.findFirst({
              where: { userId: referrer.id },
              include: { referrer: true }
            });

            if (secondLevelReferral) {
              // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
              await tx.user.update({
                where: { id: secondLevelReferral.referrer.id },
                data: { balance: { increment: 100 } }
              });

              // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–Ω—É—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
              await tx.bonus.create({
                data: {
                  userId: secondLevelReferral.referrer.id,
                  amount: 100,
                  description: '–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è'
                }
              });

              // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
              await ctx.telegram.sendMessage(
                secondLevelReferral.referrer.telegramId.toString(),
                `üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n` +
                `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤!`
              );
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await ctx.reply(`–†–∞–¥—ã –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è ${ctx.from.first_name} –≤ –±–æ—Ç–µ –°—Ç—É–¥–∏–∏ –∏–≥—Ä "–ö—É—Ä–∞–∂-–ü—Ä–æ–¥–∞–∂"!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéØ –ö—É—Ä–∞–∂!', callback_data: 'start_bot' }]
          ]
        }
      });

    } else if (userRole === 'superadmin') {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°—É–ø–µ—Ä–∞–¥–º–∏–Ω!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'open_menu' }],
            [{ text: '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data: 'admin_panel' }]
          ]
        }
      });
    } else {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await ctx.reply(`–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${ctx.from.first_name}!`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data: 'open_menu' }]
          ]
        }
      });
    }

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
