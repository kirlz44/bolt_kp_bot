const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const events = await prisma.event.findMany();
    let message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏*\n\n';
    
    if (events.length > 0) {
      message += '–¢–µ–∫—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n';
      events.forEach(event => {
        message += `üé™ ${event.title}\n`;
        message += `üìÖ ${event.date.toLocaleDateString()}\n`;
        message += `üìç ${event.location}\n\n`;
      });
    } else {
      message += '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n';
    }

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'add_event' }],
          [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'edit_event' }],
          [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'delete_event' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
