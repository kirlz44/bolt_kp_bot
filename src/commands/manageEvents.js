const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏*\n\n';
    
    const keyboard = [
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'add_event' }],
      [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'edit_event' }],
      [{ text: '‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'delete_event' }],
      [{ text: 'üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π', callback_data: 'view_event_registrations' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
