const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(ctx.from.id) }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
    const referralLink = `https://t.me/${botUsername}?start=${user.telegramId.toString()}`;

    console.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', {
      botUsername,
      userId: user.id,
      telegramId: user.telegramId.toString(),
      referralLink
    });

    await ctx.reply(
      'üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n' +
      `\`${referralLink}\`\n\n` +
      'üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n' +
      '- 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è\n' +
      '- 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è\n\n' +
      'üìù –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
            [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –µ—â—ë', callback_data: 'earn' }],
            [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
