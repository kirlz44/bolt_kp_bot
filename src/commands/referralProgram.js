const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referrals = await prisma.referral.findMany({
      where: { referrerId: user.id },
      include: {
        user: {
          select: {
            telegramId: true,
            balance: true
          }
        }
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const firstLevelIds = referrals.map(ref => ref.userId);
    const secondLevel = await prisma.referral.findMany({
      where: {
        referrerId: {
          in: firstLevelIds
        }
      },
      include: {
        user: {
          select: {
            telegramId: true,
            balance: true
          }
        }
      }
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫—É—Ä–∞–∂–∏–∫–∏
    const firstLevelPercent = user.role === 'partner' ? 10 : 5;
    const secondLevelPercent = user.role === 'partner' ? 5 : 2.5;

    const firstLevelEarnings = referrals.reduce((sum, ref) => {
      return sum + (ref.user.balance * firstLevelPercent / 100);
    }, 0);

    const secondLevelEarnings = secondLevel.reduce((sum, ref) => {
      return sum + (ref.user.balance * secondLevelPercent / 100);
    }, 0);

    const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
    const referralLink = `https://t.me/${botUsername}?start=${user.telegramId.toString()}`;
    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:', referralLink);

    let message = 'üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n';
    message += `üé≠ –í–∞—à —Å—Ç–∞—Ç—É—Å: ${user.role === 'partner' ? '–ü–∞—Ä—Ç–Ω–µ—Ä' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n`;
    message += 'üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã:\n';
    message += `- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${firstLevelPercent}% –æ—Ç –ø–æ–∫—É–ø–æ–∫\n`;
    message += `- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: ${secondLevelPercent}% –æ—Ç –ø–æ–∫—É–ø–æ–∫\n\n`;
    message += 'üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n';
    message += '- 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ\n';
    message += '- 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏\n\n';
    message += 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
    message += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è: ${referrals.length}\n`;
    message += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${secondLevel.length}\n`;
    message += `- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å 1-–≥–æ —É—Ä–æ–≤–Ω—è: ${Math.floor(firstLevelEarnings)} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n`;
    message += `- –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${Math.floor(secondLevelEarnings)} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n`;
    message += 'üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n';
    message += `\`${referralLink}\`\n\n`;
    message += '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!';

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
        [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'referral_stats' }],
        [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
      ]
    };

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
