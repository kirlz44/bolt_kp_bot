const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referrals = await prisma.referral.findMany({
      where: { referrerId: user.id },
      include: {
        user: true
      }
    });

    // –°—á–∏—Ç–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const firstLevelIds = referrals.map(ref => ref.userId);
    const secondLevel = await prisma.referral.count({
      where: {
        referrerId: {
          in: firstLevelIds
        }
      }
    });

    const botUsername = process.env.BOT_USERNAME || 'studiokp_bot';
    const referralLink = `https://t.me/${botUsername}?start=${userId}`;

    let message = 'üë• *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞*\n\n';
    message += 'üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n';
    message += '- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: 500 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n';
    message += '- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å: 100 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n\n';
    message += 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
    message += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 1-–≥–æ —É—Ä–æ–≤–Ω—è: ${referrals.length}\n`;
    message += `- –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${secondLevel}\n\n`;
    message += 'üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n';
    message += `\`${referralLink}\`\n\n`;
    message += '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!';

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', callback_data: 'copy_referral_link' }],
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', callback_data: 'referral_stats' }],
        [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
      ]
    };

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
