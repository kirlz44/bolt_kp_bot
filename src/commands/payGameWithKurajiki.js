const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx, gameId) => {
  try {
    const userId = ctx.from.id;
    const parsedGameId = parseInt(gameId);

    if (isNaN(parsedGameId)) {
      console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–≥—Ä—ã:', gameId);
      return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–≥—Ä—ã');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const [game, user] = await Promise.all([
      prisma.game.findUnique({ 
        where: { id: parsedGameId }
      }),
      prisma.user.findUnique({ 
        where: { telegramId: userId }
      })
    ]);

    if (!game) {
      return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (game.seats <= 0) {
      return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.balance < game.priceKur) {
      return ctx.reply(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ.\n' +
        `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
        `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: 'earn' }],
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–µ', callback_data: `view_game_${parsedGameId}` }]
            ]
          }
        }
      );
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
    await prisma.$transaction([
      prisma.user.update({
        where: { id: user.id },
        data: { balance: { decrement: game.priceKur } }
      }),
      prisma.user.update({
        where: { id: game.creator.id },
        data: { balance: { increment: game.priceKur } }
      }),
      prisma.game.update({
        where: { id: parsedGameId },
        data: { seats: { decrement: 1 } }
      })
    ]);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await ctx.reply(
      `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É "${game.title}" –∑–∞ ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤!\n` +
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéÆ –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä', callback_data: 'games' }]
          ]
        }
      }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const adminMessage = 
      `üéÆ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É!\n\n` +
      `–ò–≥—Ä–∞: ${game.title}\n` +
      `–î–∞—Ç–∞: ${game.date.toLocaleDateString()}\n` +
      `–û–ø–ª–∞—Ç–∞: ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `–£—á–∞—Å—Ç–Ω–∏–∫: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
      `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
      `ID: ${userId}`;

    await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ', callback_data: `game_registration_confirmed_${userId}_${parsedGameId}` }]
        ]
      }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≥—Ä—ã –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
    await ctx.telegram.sendMessage(
      game.creator.telegramId,
      `üí∞ –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ –∏–≥—Ä—É "${game.title}"!\n` +
      `–ü–æ–ª—É—á–µ–Ω–æ: ${game.priceKur} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `–û—Ç: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
      `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–≥—Ä—ã:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}; 