const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function spinWheel(ctx) {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.balance < 700) {
      return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 700 –∫—É—Ä–∞–∂–∏–∫–æ–≤');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    const lastSpin = user.lastWheelSpin;
    const now = new Date();
    if (lastSpin && lastSpin.getTime() > now.getTime() - 24 * 60 * 60 * 1000) {
      return ctx.reply('–í—ã —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏ –∫–æ–ª–µ—Å–æ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!');
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏
    await prisma.user.update({
      where: { id: user.id },
      data: {
        balance: { decrement: 700 },
        lastWheelSpin: now
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑—ã
    const prizes = await prisma.wheelPrize.findMany({
      where: { active: true }
    });

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    const prize = selectPrize(prizes);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    await handlePrize(ctx, user, prize);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –∫–æ–ª–µ—Å–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function selectPrize(prizes) {
  const random = Math.random() * 100;
  let currentProb = 0;

  for (const prize of prizes) {
    currentProb += prize.probability;
    if (random <= currentProb) {
      return prize;
    }
  }

  return prizes[prizes.length - 1]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–∑, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–∞–ª–æ
}

async function handlePrize(ctx, user, prize) {
  switch (prize.type) {
    case 'kurajiki':
      await prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { increment: prize.value }
        }
      });
      await ctx.reply(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${prize.value} –∫—É—Ä–∞–∂–∏–∫–æ–≤!`);
      break;

    case 'discount':
      const discountCode = generateDiscountCode(user.id, prize.value);
      await ctx.reply(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–∫–∏–¥–∫—É ${prize.value}%!\n` +
        `–í–∞—à –∫–æ–¥ —Å–∫–∏–¥–∫–∏: ${discountCode}\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.`
      );
      break;

    case 'special':
      await ctx.reply(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "${prize.name}"!`);
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
      const adminMessage = 
        `üéØ –í—ã–∏–≥—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑!\n` +
        `–ü—Ä–∏–∑: ${prize.name}\n` +
        `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${user.telegramId}\n` +
        `–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!`;
      await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage);
      break;
  }
}

function generateDiscountCode(userId, discount) {
  return `WHEEL${userId}D${discount}${Date.now().toString(36)}`;
}

module.exports = spinWheel;
