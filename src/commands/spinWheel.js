const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({
      where: { telegramId: userId }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.balance < 700) {
      return ctx.reply(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞.\n' +
        '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 700 –∫—É—Ä–∞–∂–∏–∫–æ–≤\n' +
        '–í–∞—à –±–∞–ª–∞–Ω—Å: ' + user.balance + ' –∫—É—Ä–∞–∂–∏–∫–æ–≤', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: 'earn' }],
              [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
            ]
          }
        }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑—ã
    const prizes = await prisma.wheelPrize.findMany({
      where: { active: true }
    });

    if (prizes.length === 0) {
      return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏
    await prisma.user.update({
      where: { id: user.id },
      data: {
        balance: { decrement: 700 }
      }
    });

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    const spinMessage = await ctx.reply('üé° –ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è...');
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–∞—â–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 3000));

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    const prize = selectPrize(prizes);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
    await handlePrize(ctx, user, prize);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await ctx.telegram.deleteMessage(ctx.chat.id, spinMessage.message_id);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –∫–æ–ª–µ—Å–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

function selectPrize(prizes) {
  const random = Math.random() * 100;
  let currentProb = 0;

  for (const prize of prizes) {
    currentProb += prize.probability;
    if (random <= currentProb) {
      return prize;
    }
  }

  return prizes[prizes.length - 1];
}

async function handlePrize(ctx, user, prize) {
  switch (prize.type) {
    case 'kurajiki':
      await prisma.user.update({
        where: { id: user.id },
        data: {
          balance: { increment: prize.value }
        }
      });
      await ctx.reply(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${prize.value} –∫—É—Ä–∞–∂–∏–∫–æ–≤!\n` +
        `–û–Ω–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üé° –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: 'spin_wheel' }],
              [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
            ]
          }
        }
      );
      break;

    case 'discount':
      const discountCode = generateDiscountCode(user.id, prize.value);
      await ctx.reply(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–∫–∏–¥–∫—É ${prize.value}%!\n` +
        `–í–∞—à –∫–æ–¥ —Å–∫–∏–¥–∫–∏: ${discountCode}\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }],
              [{ text: 'üé° –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: 'spin_wheel' }],
              [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
            ]
          }
        }
      );
      break;

    case 'special':
      await ctx.reply(
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ "${prize.name}"!\n` +
        `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üé° –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑', callback_data: 'spin_wheel' }],
              [{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]
            ]
          }
        }
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const winner = ctx.from;
      const username = winner.username ? `@${winner.username}` : '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const fullName = winner.first_name + (winner.last_name ? ` ${winner.last_name}` : '');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const adminMessage = 
        `üéØ –í—ã–∏–≥—Ä–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑!\n` +
        `–ü—Ä–∏–∑: ${prize.name}\n` +
        `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${fullName}\n` +
        `Username: ${username}\n` +
        `ID: ${user.telegramId}\n\n` +
        `–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!`;

      await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü—Ä–∏–∑ –≤—ã–¥–∞–Ω', callback_data: `prize_given_${user.telegramId}` }]
          ]
        }
      });
      break;
  }
}

function generateDiscountCode(userId, discount) {
  return `WHEEL${userId}D${discount}${Date.now().toString(36).toUpperCase()}`;
}
