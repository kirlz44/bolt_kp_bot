const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    if (ctx.state.userRole !== 'admin' && ctx.state.userRole !== 'superadmin') {
      return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–∏–¥–µ–æ', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'admin_panel' }]]
        }
      });
    }

    const qualifications = [
      '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å/–≠–∫—Å–ø–µ—Ä—Ç',
      '–ò–≥—Ä–æ–ø—Ä–∞–∫—Ç–∏–∫',
      '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π',
      '–ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä',
      '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å/HR',
      '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è',
      '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ',
      '–ê–≤—Ç–æ—Ä –∏–≥—Ä',
      '–ü—Å–∏—Ö–æ–ª–æ–≥',
      '–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä',
      'MLM-–±–∏–∑–Ω–µ—Å',
      '–ë—å—é—Ç–∏ —Å—Ñ–µ—Ä–∞'
    ];

    const videos = await prisma.welcomeVideo.findMany();
    let message = '*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–µ–æ*\n\n';

    qualifications.forEach((qual, index) => {
      const video = videos.find(v => v.qualification === `qualification_${index + 1}`);
      message += `${index + 1}. ${qual}: ${video ? '‚úÖ' : '‚ùå'}\n`;
    });

    const keyboard = qualifications.map((qual, index) => [{
      text: `${index + 1}. ${qual}`,
      callback_data: `upload_video_${index + 1}`
    }]);

    keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_panel' }]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
