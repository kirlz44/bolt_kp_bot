const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

module.exports = async (ctx, productId) => {
  try {
    const userId = ctx.from.id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const [product, user] = await Promise.all([
      prisma.product.findUnique({ where: { id: productId } }),
      prisma.user.findUnique({ where: { telegramId: userId } })
    ]);

    if (!product) {
      return ctx.reply('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (product.stock <= 0) {
      return ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞
    const discountCode = ctx.session?.discountCode;
    let finalPrice = product.priceKur;

    if (discountCode && discountCode.startsWith('WHEEL') && discountCode.includes('D')) {
      const discountPercent = parseInt(discountCode.match(/D(\d+)/)[1]);
      finalPrice = Math.round(product.priceKur * (1 - discountPercent / 100));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.balance < finalPrice) {
      return ctx.reply(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—É—Ä–∞–∂–∏–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' +
        `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${finalPrice} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
        `–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∫—É—Ä–∞–∂–∏–∫–æ–≤`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä–∞–∂–∏–∫–∏', callback_data: 'earn' }],
              [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–æ–≤–∞—Ä—É', callback_data: `view_product_${productId}` }]
            ]
          }
        }
      );
    }

    // –°–ø–∏—Å—ã–≤–∞–µ–º –∫—É—Ä–∞–∂–∏–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    await prisma.$transaction([
      prisma.user.update({
        where: { id: user.id },
        data: { balance: { decrement: finalPrice } }
      }),
      prisma.product.update({
        where: { id: productId },
        data: { stock: { decrement: 1 } }
      })
    ]);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
    await ctx.reply(
      `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ "${product.name}" –∑–∞ ${finalPrice} –∫—É—Ä–∞–∂–∏–∫–æ–≤!\n` +
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõç –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', callback_data: 'marketplace' }]
          ]
        }
      }
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–∫—É–ø–∫–µ
    const adminMessage = 
      `üõç –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–∞ –∫—É—Ä–∞–∂–∏–∫–∏!\n\n` +
      `–¢–æ–≤–∞—Ä: ${product.name}\n` +
      `–¶–µ–Ω–∞: ${finalPrice} –∫—É—Ä–∞–∂–∏–∫–æ–≤\n` +
      `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${ctx.from.first_name} ${ctx.from.last_name || ''}\n` +
      `Username: @${ctx.from.username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n` +
      `ID: ${userId}`;

    await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω', callback_data: `product_given_${userId}_${productId}` }]
        ]
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
