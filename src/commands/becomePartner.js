const { PrismaClient } = require('@prisma/client');
const { generatePaymentUrl } = require('../services/robokassa');
const prisma = new PrismaClient();

module.exports = async (ctx) => {
  try {
    const userId = ctx.from.id;
    const user = await prisma.user.findUnique({ where: { telegramId: userId } });

    if (!user) {
      return ctx.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üîô –í –º–µ–Ω—é', callback_data: 'open_menu' }]]
        }
      });
    }

    const message = '–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –º–æ–∂–Ω–æ –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n' +
      '1. –û–ø–ª–∞—Ç–∏—Ç—å 500 —Ä—É–±–ª–µ–π\n' +
      '2. –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å 1000 –∫—É—Ä–∞–∂–∏–∫–æ–≤';

    const keyboard = [
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 500‚ÇΩ', callback_data: 'pay_partner_money' }],
      [{ text: 'üíé –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä–∞–∂–∏–∫–∞–º–∏', callback_data: 'pay_partner_kurajiki' }],
      [{ text: 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'open_menu' }]
    ];

    await ctx.editMessageText(message, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ becomePartner:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};
